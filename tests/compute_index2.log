============================= test session starts =============================
platform win32 -- Python 3.6.5, pytest-5.4.3, py-1.8.0, pluggy-0.12.0
rootdir: C:\Users\irabidea\Documents\GitHub\EnergyIntensityIndicators
collected 10 items

tests\lmdi_test.py ..E..F..FF                                            [100%]

=================================== ERRORS ====================================
_______________ ERROR at setup of TestLMDI.test_calc_component ________________
file C:\Users\irabidea\Documents\GitHub\EnergyIntensityIndicators\tests\lmdi_test.py, line 321
      def test_calc_component(self, sector):
E       fixture 'sector' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\irabidea\Documents\GitHub\EnergyIntensityIndicators\tests\lmdi_test.py:321
================================== FAILURES ===================================
_________________ TestLMDI.test_multiplicative_decomposition __________________

self = <lmdi_test.TestLMDI object at 0x0000024054ECF320>
sector = 'transportation'

    def test_multiplicative_decomposition(self, sector='transportation'):
        eii = MultiplicativeLMDI()
    
        test_weights = [[0.7258, 0.2742],
                        [0.7276, 0.2724],
                        [0.7307, 0.2693],
                        [0.7372, 0.2628],
                        [0.7380, 0.2620]]
        test_weights = pd.DataFrame(test_weights,
                                    index=[1983, 1984, 1985, 1986, 1987],
                                    columns=['All Passenger', 'All Freight'])
    
        log_change_intensity = [[-0.0172, -0.0637],
                                [-0.0016, -0.0118],
                                [0.0024, -0.0134],
                                [0.0114, -0.0029],
                                [-0.0180, -0.0211]]
        log_change_intensity = pd.DataFrame(log_change_intensity,
                                            index=[1983, 1984, 1985, 1986, 1987],
                                            columns=['All Passenger', 'All Freight'])
    
        log_change_activity = [[0.0353, 0.0447],
                               [0.0289, 0.0416],
                               [0.0245, -0.0129],
                               [0.0239, -0.0049],
                               [0.0360, 0.0528]]
        log_change_activity = pd.DataFrame(log_change_activity,
                                           index=[1983, 1984, 1985, 1986, 1987],
                                           columns=['All Passenger', 'All Freight'])
    
        log_change_lower_level_structure =[[0.0010, 0.0109],
                                           [0.0034, 0.0106],
                                           [0.0019, 0.0139],
                                           [0.0018, 0.0199],
                                           [0.0008, 0.0040]]
        log_change_lower_level_structure = pd.DataFrame(log_change_lower_level_structure,
                                                        index=[1983, 1984, 1985, 1986, 1987],
                                                        columns=['All Passenger', 'All Freight'])
    
        log_change_structure = [[1, 1],
                                [1, 1],
                                [1, 1],
                                [1, 1],
                                [1, 1]]
    
        log_change_structure = pd.DataFrame(log_change_structure,
                                            index=[1983, 1984, 1985, 1986, 1987],
                                            columns=['All Passenger', 'All Freight'])
    
        test_log_ratios = {'intensity': log_change_intensity,
                           'activity': log_change_activity,
                           'structure': log_change_structure,
                           'lower_level_structure': log_change_lower_level_structure}
    
    
        test_asi = [[1.0062, 0.9543, 0.9895],
                    [1.0018, 0.9857, 0.9948],
                    [1.0000, 1.0000, 1.0000],
                    [1.0076, 1.0165, 1.0066],
                    [0.9889, 1.0584, 1.0082]]
    
        test_asi = pd.DataFrame(test_asi,
                                index=[1983, 1984, 1985, 1986, 1987],
                                columns=['Intensity Index', 'Activity Index', 'Structure Index (lower level)'])
    
        weather_data = None
        model = 'multiplicative'
>       components = eii.calc_ASI(model, weather_data, test_weights, test_log_ratios)
E       AttributeError: 'MultiplicativeLMDI' object has no attribute 'calc_ASI'

tests\lmdi_test.py:520: AttributeError
___________________________ TestLMDI.test_calc_asi ____________________________

self = <lmdi_test.TestLMDI object at 0x0000024054EEF6D8>
sector = 'transportation', acceptable_pct_difference = 0.05

    def test_calc_asi(self, sector='transportation', acceptable_pct_difference=0.05):
        """Write test_calc_ASI to test LMDI class.
    
        - Test both additive and multiplicative forms
        - Test all sectors
        """
    
        eii = self.eii_output_factory(sector)
    
        pnnl_data = self.get_pnnl_input(sector, 'intermediate')
    
        pnnl_output = self.get_pnnl_data(sector)
        pnnl_output = pnnl_output['results']
    
        model = 'multiplicative'
    
        bools_list = []
    
        for e_type in pnnl_data['Energy Type'].unique():
    
            for level_ in pnnl_data['Nest level'].unique():
    
    
                if 'Weather' in pnnl_data['Energy Type']:
                    weather_data = pnnl_data[pnnl_data['Energy Type'] == 'Weather']
                else:
                    weather_data = None
    
                log_mean_divisia_weights_normalized = pnnl_data[pnnl_data['Data Type'] == 'Log Mean Divisia Weights (normalized)'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                log_ratio_activity = pnnl_data[pnnl_data['Data Type'] == 'Log Changes Activity'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                log_ratio_structure = pnnl_data[pnnl_data['Data Type'] == 'Log Changes Lower-level Structure'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                log_ratio_intensity = pnnl_data[pnnl_data['Data Type'] == 'Log Changes Intensity'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
    
                log_ratios = {'activity': log_ratio_activity,
                              'structure': log_ratio_structure,
                              'intensity': log_ratio_intensity}
    
                print('log ratios:\n', log_ratios)
                print('log ratios type:\n', type(log_ratios['activity']))
    
                print("log_mean_divisia_weights_normalized: \n", log_mean_divisia_weights_normalized)
    
                print("log_mean_divisia_weights_normalized type: \n", type(log_mean_divisia_weights_normalized))
    
                eii_output = eii.calc_ASI(model, weather_data, log_mean_divisia_weights_normalized,
>                                         log_ratios)

tests\lmdi_test.py:770: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
EnergyIntensityIndicators\LMDI.py:120: in calc_ASI
    structure = self.calc_component(log_ratios['structure'], log_mean_divisia_weights_normalized)
EnergyIntensityIndicators\LMDI.py:100: in calc_component
    component = (weights.multiply(log_ratio_component.values, axis='columns')).sum(axis=1)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:2018: in f
    other = _align_method_FRAME(self, other, axis)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

left = Category    Highway       Air  All Freight  ...  Pipeline      Rail  Waterborne
Year                                  ...3604    0.013383
2017       0.781068  0.050053     0.303465  ...  0.095266  0.060562    0.013052

[48 rows x 9 columns]
right = array([[           nan,            nan,            nan,            nan,
                   nan,            nan,       ....8682250e-03,  0.0000000e+00, -6.3579920e-03, -5.7449700e-04,
         0.0000000e+00,  0.0000000e+00,  0.0000000e+00]])
axis = 'columns'

    def _align_method_FRAME(left, right, axis):
        """ convert rhs to meet lhs dims if input is list, tuple or np.ndarray """
    
        def to_series(right):
            msg = ('Unable to coerce to Series, length must be {req_len}: '
                   'given {given_len}')
            if axis is not None and left._get_axis_name(axis) == 'index':
                if len(left.index) != len(right):
                    raise ValueError(msg.format(req_len=len(left.index),
                                                given_len=len(right)))
                right = left._constructor_sliced(right, index=left.index)
            else:
                if len(left.columns) != len(right):
                    raise ValueError(msg.format(req_len=len(left.columns),
                                                given_len=len(right)))
                right = left._constructor_sliced(right, index=left.columns)
            return right
    
        if isinstance(right, np.ndarray):
    
            if right.ndim == 1:
                right = to_series(right)
    
            elif right.ndim == 2:
                if right.shape == left.shape:
                    right = left._constructor(right, index=left.index,
                                              columns=left.columns)
    
                elif right.shape[0] == left.shape[0] and right.shape[1] == 1:
                    # Broadcast across columns
                    right = np.broadcast_to(right, left.shape)
                    right = left._constructor(right,
                                              index=left.index,
                                              columns=left.columns)
    
                elif right.shape[1] == left.shape[1] and right.shape[0] == 1:
                    # Broadcast along rows
                    right = to_series(right[0, :])
    
                else:
                    raise ValueError("Unable to coerce to DataFrame, shape "
                                     "must be {req_shape}: given {given_shape}"
                                     .format(req_shape=left.shape,
>                                            given_shape=right.shape))
E                   ValueError: Unable to coerce to DataFrame, shape must be (48, 9): given (48, 7)

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:1976: ValueError
---------------------------- Captured stdout call -----------------------------
pnnl_Cars and SWB Vehicles.csv failed with error could not convert string to float: 'raw_data' for input_data, 
 print Index(['Sector', 'Nest level', 'Unit', 'Data Type', 'Energy Type', 'datatype',
       'Year', 'Passenger Car', 'SWB Vehicles', 'Cars and SWB Vehicles'],
      dtype='object')
pnnl_Light Trucks and LWB.csv failed with error could not convert string to float: 'Tbtu' for input_data, 
 print Index(['Sector', 'Nest level', 'Unit', 'Data Type', 'Energy Type', 'Year',
       'Light Trucks', 'LWB Vehicles', 'Light Trucks and LWB Vehicles'],
      dtype='object')
pnnl_Passenger Highway.csv failed with error could not convert string to float: 'Tbtu' for input_data, 
 print Index(['Sector', 'Nest level', 'Unit', 'Data Type', 'Energy Type', 'Year',
       'Passenger Cars and Trucks', 'Buses', 'Paratransit',
       'Passenger Highway'],
      dtype='object')
pnnl_weights.csv failed with error could not convert string to float: 'Passenger Cars and Trucks Weights ' for results, 
 print Index(['Sector', 'Nest level', 'Energy Type', 'Unit', 'Data Type', 'Year',
       'All Passenger Weights ', 'All Freight Weights', 'Unnamed: 8',
       'Weighted Activity Index', 'Index of  Aggregate Intensity',
       'Structure:Passenger vs Freight (*)', 'Structure: Lower level (**)',
       'Component Intensity      Index', 'Effect', 'Actual Energy Use',
       'Total Structure', 'Unnamed: 17', 'Unnamed: 18'],
      dtype='object')
log ratios:
 {'activity': Category    Highway       Air  All Freight  ...  Pipeline      Rail  Waterborne
Year                                        ...                                
1970       0.145576 -0.238654     0.096806  ... -0.046182 -0.100763    0.022969
1971       0.062730  0.180348     0.012510  ...  0.019507 -0.045833   -0.017608
1972       0.020239  0.075840     0.039591  ... -0.027316  0.009220   -0.022245
1973       0.027038 -0.030386     0.044234  ... -0.046977  0.048015   -0.075966
1974      -0.008216  0.022206    -0.009055  ... -0.029421  0.008059    0.011880
1975       0.016723  0.040684    -0.077333  ... -0.005618 -0.043307    0.041991
1976       0.040258  0.192158     0.061607  ... -0.049973 -0.010176   -0.016914
1977       0.042562  0.026032     0.040585  ... -0.065380 -0.000794   -0.028582
1978      -0.046064 -0.065164     0.123801  ... -0.116880 -0.086023    0.199060
1979      -0.017807 -0.001294     0.025931  ...  0.012970  0.036811   -0.024124
1980      -0.093086  0.029463     0.009777  ... -0.005653 -0.004005    0.096661
1981      -0.028014  0.018117    -0.013818  ... -0.007392  0.004208    0.022004
1982       0.060315  0.050586    -0.064550  ... -0.025680 -0.067274    0.017242
1983       0.043438  0.039883     0.044746  ... -0.103422 -0.007207   -0.008090
1984       0.008817  0.051637     0.041633  ...  0.020085  0.065070   -0.076878
1985       0.023052 -0.017520    -0.012931  ... -0.020271 -0.036629    0.018827
1986       0.033586  0.199173    -0.004935  ... -0.060225 -0.005683   -0.017223
1987      -0.004245  0.125882     0.052789  ... -0.004781  0.031198   -0.027896
1988       0.013926  0.072830     0.034971  ...  0.013845  0.019101   -0.041005
1989       0.028609  0.115561    -0.004730  ...  0.069958  0.022302   -0.082661
1990       0.005106 -0.016352     0.019786  ... -0.027996 -0.000127    0.002038
1991       0.006316 -0.031557     0.015963  ...  0.015607 -0.011229    0.001702
1992       0.001466  0.047176     0.022011  ...  0.013154  0.004496   -0.012292
1993       0.034363  0.086559     0.011146  ...  0.016824  0.027945   -0.092616
1994       0.005977  0.072675     0.059200  ... -0.036071  0.019969   -0.027711
1995      -0.004271  0.026260     0.044724  ... -0.002005  0.039101   -0.053588
1996       0.013237  0.049937     0.012975  ...  0.004692  0.024815   -0.067734
1997       0.043498  0.103429     0.000186  ...  0.006317 -0.005399   -0.078042
1998       0.018153  0.008281     0.006280  ... -0.023014  0.014175   -0.056449
1999       0.009314 -0.130623     0.022653  ... -0.010831  0.017675   -0.048145
2000      -0.002725  0.169179     0.014595  ...  0.026107  0.007824   -0.030056
2001       0.014781 -0.085142     0.004577  ... -0.054301  0.015354   -0.042631
2002       0.014228  0.074789     0.015186  ...  0.019902 -0.007500   -0.030757
2003      -0.001113  0.049658     0.011963  ... -0.043758  0.017091   -0.021707
2004      -0.023532  0.119192     0.037711  ... -0.029856  0.031488   -0.013227
2005       0.005801  0.031062     0.003478  ... -0.023451  0.016663   -0.052799
2006      -0.012912  0.004027     0.007662  ... -0.025372  0.035866   -0.059105
2007       0.007661 -0.005631     0.007843  ...  0.054833 -0.008606   -0.023053
2008       0.013122 -0.112217    -0.002355  ...  0.009437  0.006127   -0.058447
2009       0.024041 -0.053345    -0.105295  ...  0.084724 -0.043050    0.018238
2010      -0.041188  0.091792     0.057801  ... -0.003839  0.040807   -0.006550
2011      -0.053577  0.030056    -0.015843  ...  0.031092  0.038211    0.010924
2012       0.009032 -0.015702    -0.006266  ...  0.047440 -0.003432   -0.045033
2013       0.010354 -0.055213     0.015032  ...  0.003064  0.001255   -0.035604
2014      -0.030787 -0.015373     0.042127  ... -0.019639  0.019443    0.039196
2015       0.029555  0.042597    -0.027053  ...  0.051693 -0.035899   -0.000059
2016       0.058761  0.057544    -0.031912  ...  0.040791 -0.066452    0.005078
2017      -0.004872  0.063624     0.040631  ... -0.055503  0.020519   -0.017879

[48 rows x 9 columns], 'structure': Category    Highway  Air  All Freight  ...  Pipeline  Rail  Waterborne
Year                                   ...                            
1970            NaN  NaN          NaN  ...       NaN   NaN         NaN
1971      -0.002305  0.0     0.037469  ...       0.0   0.0         0.0
1972       0.006819  0.0     0.012897  ...       0.0   0.0         0.0
1973      -0.000737  0.0     0.007623  ...       0.0   0.0         0.0
1974       0.003557  0.0    -0.005375  ...       0.0   0.0         0.0
1975       0.030699  0.0     0.026275  ...       0.0   0.0         0.0
1976      -0.016617  0.0     0.014454  ...       0.0   0.0         0.0
1977      -0.001695  0.0     0.017793  ...       0.0   0.0         0.0
1978       0.001710  0.0    -0.047097  ...       0.0   0.0         0.0
1979      -0.007969  0.0    -0.013133  ...       0.0   0.0         0.0
1980       0.008892  0.0    -0.051588  ...       0.0   0.0         0.0
1981       0.010086  0.0    -0.010720  ...       0.0   0.0         0.0
1982       0.008376  0.0     0.040146  ...       0.0   0.0         0.0
1983      -0.011417  0.0     0.010902  ...       0.0   0.0         0.0
1984      -0.002026  0.0     0.010566  ...       0.0   0.0         0.0
1985       0.003555  0.0     0.013925  ...       0.0   0.0         0.0
1986      -0.006884  0.0     0.019938  ...       0.0   0.0         0.0
1987       0.000664  0.0     0.003986  ...       0.0   0.0         0.0
1988      -0.005522  0.0     0.010779  ...       0.0   0.0         0.0
1989       0.001315  0.0     0.033807  ...       0.0   0.0         0.0
1990      -0.001352  0.0    -0.001508  ...       0.0   0.0         0.0
1991      -0.000905  0.0     0.003299  ...       0.0   0.0         0.0
1992      -0.001386  0.0     0.003748  ...       0.0   0.0         0.0
1993       0.001818  0.0     0.031420  ...       0.0   0.0         0.0
1994       0.002984  0.0     0.007104  ...       0.0   0.0         0.0
1995      -0.004562  0.0    -0.004092  ...       0.0   0.0         0.0
1996      -0.001202  0.0     0.011937  ...       0.0   0.0         0.0
1997      -0.000155  0.0     0.036064  ...       0.0   0.0         0.0
1998      -0.001933  0.0     0.009677  ...       0.0   0.0         0.0
1999       0.000229  0.0    -0.001503  ...       0.0   0.0         0.0
2000      -0.001787  0.0     0.008707  ...       0.0   0.0         0.0
2001       0.001545  0.0     0.002712  ...       0.0   0.0         0.0
2002       0.003331  0.0     0.018443  ...       0.0   0.0         0.0
2003       0.002427  0.0     0.000875  ...       0.0   0.0         0.0
2004      -0.000814  0.0    -0.011756  ...       0.0   0.0         0.0
2005      -0.001350  0.0     0.003809  ...       0.0   0.0         0.0
2006       0.004704  0.0    -0.006487  ...       0.0   0.0         0.0
2007       0.000000  0.0     0.008920  ...       0.0   0.0         0.0
2008       0.007561  0.0     0.009910  ...       0.0   0.0         0.0
2009       0.004751  0.0     0.024970  ...       0.0   0.0         0.0
2010      -0.016383  0.0    -0.038435  ...       0.0   0.0         0.0
2011       0.000746  0.0    -0.033614  ...       0.0   0.0         0.0
2012       0.002275  0.0     0.011739  ...       0.0   0.0         0.0
2013      -0.002548  0.0     0.003112  ...       0.0   0.0         0.0
2014       0.002176  0.0    -0.022846  ...       0.0   0.0         0.0
2015       0.000032  0.0     0.027468  ...       0.0   0.0         0.0
2016       0.001072  0.0     0.049157  ...       0.0   0.0         0.0
2017      -0.001868  0.0    -0.006358  ...       0.0   0.0         0.0

[48 rows x 7 columns], 'intensity': Category    Highway       Air  All Freight  ...  Pipeline      Rail    Waterborne
Year                                        ...                                  
1970       0.000000       NaN          NaN  ...  0.128831 -0.026153           NaN
1971      -0.027316 -0.043414    -0.012914  ... -0.004124  0.037319 -1.005034e-02
1972       0.033525 -0.100436     0.016967  ...  0.018965 -0.004281 -1.005034e-02
1973       0.027221  0.037977     0.000516  ... -0.048098 -0.052099 -1.005034e-02
1974       0.013974 -0.024277    -0.000855  ... -0.046595  0.004510 -1.005034e-02
1975       0.049583  0.007935     0.022828  ... -0.054398  0.009581 -1.005034e-02
1976      -0.031657 -0.123376    -0.038124  ... -0.072893 -0.009743 -1.005034e-02
1977       0.020220 -0.119185     0.004660  ... -0.004169 -0.017069 -1.005034e-02
1978       0.025701 -0.100809     0.006479  ... -0.011094 -0.042069 -1.005034e-02
1979       0.032503 -0.067322     0.025405  ...  0.085907 -0.036826 -1.005034e-02
1980       0.073661 -0.039262     0.050441  ...  0.050371 -0.034720 -1.005034e-02
1981       0.048134  0.055493     0.034299  ...  0.033275 -0.037424 -1.005034e-02
1982      -0.005092 -0.056566    -0.007727  ...  0.016065 -0.040086 -1.005034e-02
1983      -0.057770 -0.054941    -0.063693  ... -0.137763 -0.050466 -1.005034e-02
1984      -0.015754  0.028985    -0.011764  ...  0.014315 -0.029773 -1.005034e-02
1985      -0.011386 -0.022834    -0.013376  ... -0.015210 -0.025175 -1.005034e-02
1986      -0.004073 -0.008345    -0.002925  ...  0.027281 -0.023388 -1.005034e-02
1987      -0.021012 -0.051666    -0.021136  ...  0.019990 -0.063418 -1.005034e-02
1988      -0.023860 -0.007687    -0.006954  ...  0.118804 -0.028598 -1.005034e-02
1989      -0.001499 -0.017014    -0.008368  ... -0.040459 -0.014889 -1.005034e-02
1990       0.021944  0.012183     0.019625  ...  0.055551 -0.037625 -1.005034e-02
1991      -0.007010 -0.080484    -0.029212  ... -0.124429 -0.073407 -1.005034e-02
1992      -0.004548  0.003081    -0.009433  ... -0.058034  0.005775 -1.005034e-02
1993      -0.017064 -0.023993    -0.011346  ...  0.032440 -0.009745 -1.005034e-02
1994      -0.012444 -0.028611    -0.003518  ...  0.070174 -0.003684 -1.005034e-02
1995       0.007347 -0.012794    -0.001004  ... -0.021108 -0.040955 -1.005034e-02
1996      -0.003448 -0.034769    -0.005826  ... -0.001926 -0.010199 -1.005034e-02
1997      -0.032377 -0.007894    -0.018486  ...  0.048228  0.005767 -1.005034e-02
1998       0.039699  0.000369     0.011559  ... -0.150921 -0.016024 -3.831886e-02
1999       0.013859  0.006566     0.011733  ...  0.003547 -0.005037  3.831886e-02
2000       0.026400 -0.046065     0.011555  ... -0.045531 -0.030157  1.492565e-02
2001      -0.020635  0.013248    -0.015535  ...  0.022502 -0.017274 -6.503247e-02
2002       0.015146 -0.080708     0.009534  ...  0.029888 -0.001965  2.220450e-16
2003      -0.055369 -0.037045    -0.052729  ... -0.088227 -0.003318 -7.936550e-03
2004       0.001292 -0.077453    -0.009432  ... -0.051579 -0.010428 -4.065601e-02
2005       0.018865 -0.011846     0.016928  ...  0.050994 -0.010949  2.220450e-16
2006       0.022835  0.003857     0.017354  ...  0.018030 -0.020849 -2.521142e-02
2007      -0.000244 -0.022774    -0.004440  ... -0.001024 -0.029835 -4.348511e-02
2008      -0.008066 -0.014359    -0.005699  ...  0.034824 -0.047837  1.133287e-01
2009       0.002520 -0.027640     0.000860  ...  0.054286 -0.046099 -1.133287e-01
2010       0.015912 -0.042007     0.004783  ... -0.048085 -0.009826 -3.620305e-02
2011       0.008542 -0.004591     0.008400  ...  0.004812  0.030611 -2.803922e-02
2012      -0.006094 -0.038398    -0.005514  ...  0.019477 -0.011124 -1.110220e-16
2013      -0.000768 -0.015498     0.012644  ...  0.112885  0.005100  9.918032e-02
2014       0.002857 -0.028138    -0.021932  ... -0.196300 -0.013061 -8.506244e-02
2015      -0.008797 -0.005978    -0.011269  ... -0.056517  0.017246  4.662013e-03
2016      -0.001827 -0.013542    -0.000904  ...  0.003648  0.013182  0.000000e+00
2017      -0.010327 -0.023862    -0.004785  ...  0.064285 -0.027219  0.000000e+00

[48 rows x 9 columns]}
log ratios type:
 <class 'pandas.core.frame.DataFrame'>
log_mean_divisia_weights_normalized: 
 Category    Highway       Air  All Freight  ...  Pipeline      Rail  Waterborne
Year                                        ...                                
1970            NaN       NaN     0.608851  ...       NaN       NaN         NaN
1971       0.545642  0.043604     0.239771  ...  0.212601  0.142538    0.055615
1972       0.556499  0.044869     0.239025  ...  0.207640  0.138465    0.052527
1973       0.578227  0.043655     0.240388  ...  0.193578  0.135942    0.048598
1974       0.595936  0.043724     0.243741  ...  0.177455  0.136361    0.046523
1975       0.615362  0.043816     0.241232  ...  0.162361  0.132136    0.046325
1976       0.635056  0.045886     0.235007  ...  0.146261  0.126953    0.045844
1977       0.652623  0.045371     0.237634  ...  0.132930  0.124672    0.044403
1978       0.672799  0.040233     0.246101  ...  0.121547  0.117007    0.048415
1979       0.678105  0.036265     0.256603  ...  0.121460  0.111242    0.052929
1980       0.673041  0.034666     0.270443  ...  0.129744  0.108505    0.054044
1981       0.672087  0.035393     0.279847  ...  0.132890  0.103508    0.056122
1982       0.685074  0.035605     0.279172  ...  0.130311  0.093901    0.055109
1983       0.705418  0.035599     0.274154  ...  0.116312  0.087292    0.055379
1984       0.712004  0.037788     0.272414  ...  0.107569  0.088659    0.053980
1985       0.714457  0.038560     0.269306  ...  0.107544  0.087528    0.051911
1986       0.721802  0.041263     0.262828  ...  0.103033  0.082910    0.050992
1987       0.721070  0.047066     0.262025  ...  0.102114  0.080399    0.049351
1988       0.711620  0.050798     0.265252  ...  0.110773  0.079278    0.047531
1989       0.705746  0.054326     0.267906  ...  0.118287  0.078035    0.043607
1990       0.709451  0.055710     0.273567  ...  0.119082  0.075210    0.040547
1991       0.720964  0.052792     0.280657  ...  0.114834  0.071032    0.040378
1992       0.730117  0.051986     0.280836  ...  0.107995  0.069511    0.040392
1993       0.730236  0.054607     0.278931  ...  0.107457  0.070003    0.037697
1994       0.727285  0.056918     0.283592  ...  0.110709  0.070381    0.034707
1995       0.726020  0.058619     0.290305  ...  0.111399  0.070943    0.033018
1996       0.728236  0.059434     0.291987  ...  0.110215  0.071362    0.030753
1997       0.726774  0.062096     0.290669  ...  0.112096  0.071056    0.027978
1998       0.737348  0.064166     0.290299  ...  0.103767  0.069665    0.025054
1999       0.754922  0.059648     0.290218  ...  0.093121  0.068924    0.023386
2000       0.760502  0.058698     0.293426  ...  0.090497  0.067556    0.022747
2001       0.764343  0.059977     0.296061  ...  0.087874  0.066487    0.021319
2002       0.769405  0.057246     0.298455  ...  0.087998  0.065613    0.019738
2003       0.770428  0.058139     0.294153  ...  0.085496  0.066557    0.019380
2004       0.768837  0.061960     0.286296  ...  0.079689  0.070236    0.019279
2005       0.769075  0.063879     0.289311  ...  0.077572  0.071190    0.018284
2006       0.771521  0.063735     0.294246  ...  0.077133  0.070804    0.016807
2007       0.774126  0.062607     0.299924  ...  0.078351  0.069451    0.015465
2008       0.778588  0.057730     0.308152  ...  0.081935  0.066439    0.015308
2009       0.784104  0.051257     0.309161  ...  0.088511  0.061339    0.014789
2010       0.782980  0.050643     0.307642  ...  0.092748  0.059782    0.013847
2011       0.772502  0.054149     0.304203  ...  0.094775  0.064734    0.013841
2012       0.764725  0.053888     0.299476  ...  0.100720  0.067121    0.013546
2013       0.761076  0.050086     0.303091  ...  0.109195  0.066120    0.013524
2014       0.765142  0.047990     0.304688  ...  0.105490  0.067534    0.013844
2015       0.774001  0.048500     0.301901  ...  0.095683  0.068063    0.013753
2016       0.779612  0.048896     0.300614  ...  0.094505  0.063604    0.013383
2017       0.781068  0.050053     0.303465  ...  0.095266  0.060562    0.013052

[48 rows x 9 columns]
log_mean_divisia_weights_normalized type: 
 <class 'pandas.core.frame.DataFrame'>
log ratio activity final:
 Category    Highway       Air  All Freight  ...  Pipeline      Rail  Waterborne
Year                                        ...                                
1970       0.145576 -0.238654     0.096806  ... -0.046182 -0.100763    0.022969
1971       0.062730  0.180348     0.012510  ...  0.019507 -0.045833   -0.017608
1972       0.020239  0.075840     0.039591  ... -0.027316  0.009220   -0.022245
1973       0.027038 -0.030386     0.044234  ... -0.046977  0.048015   -0.075966
1974      -0.008216  0.022206    -0.009055  ... -0.029421  0.008059    0.011880
1975       0.016723  0.040684    -0.077333  ... -0.005618 -0.043307    0.041991
1976       0.040258  0.192158     0.061607  ... -0.049973 -0.010176   -0.016914
1977       0.042562  0.026032     0.040585  ... -0.065380 -0.000794   -0.028582
1978      -0.046064 -0.065164     0.123801  ... -0.116880 -0.086023    0.199060
1979      -0.017807 -0.001294     0.025931  ...  0.012970  0.036811   -0.024124
1980      -0.093086  0.029463     0.009777  ... -0.005653 -0.004005    0.096661
1981      -0.028014  0.018117    -0.013818  ... -0.007392  0.004208    0.022004
1982       0.060315  0.050586    -0.064550  ... -0.025680 -0.067274    0.017242
1983       0.043438  0.039883     0.044746  ... -0.103422 -0.007207   -0.008090
1984       0.008817  0.051637     0.041633  ...  0.020085  0.065070   -0.076878
1985       0.023052 -0.017520    -0.012931  ... -0.020271 -0.036629    0.018827
1986       0.033586  0.199173    -0.004935  ... -0.060225 -0.005683   -0.017223
1987      -0.004245  0.125882     0.052789  ... -0.004781  0.031198   -0.027896
1988       0.013926  0.072830     0.034971  ...  0.013845  0.019101   -0.041005
1989       0.028609  0.115561    -0.004730  ...  0.069958  0.022302   -0.082661
1990       0.005106 -0.016352     0.019786  ... -0.027996 -0.000127    0.002038
1991       0.006316 -0.031557     0.015963  ...  0.015607 -0.011229    0.001702
1992       0.001466  0.047176     0.022011  ...  0.013154  0.004496   -0.012292
1993       0.034363  0.086559     0.011146  ...  0.016824  0.027945   -0.092616
1994       0.005977  0.072675     0.059200  ... -0.036071  0.019969   -0.027711
1995      -0.004271  0.026260     0.044724  ... -0.002005  0.039101   -0.053588
1996       0.013237  0.049937     0.012975  ...  0.004692  0.024815   -0.067734
1997       0.043498  0.103429     0.000186  ...  0.006317 -0.005399   -0.078042
1998       0.018153  0.008281     0.006280  ... -0.023014  0.014175   -0.056449
1999       0.009314 -0.130623     0.022653  ... -0.010831  0.017675   -0.048145
2000      -0.002725  0.169179     0.014595  ...  0.026107  0.007824   -0.030056
2001       0.014781 -0.085142     0.004577  ... -0.054301  0.015354   -0.042631
2002       0.014228  0.074789     0.015186  ...  0.019902 -0.007500   -0.030757
2003      -0.001113  0.049658     0.011963  ... -0.043758  0.017091   -0.021707
2004      -0.023532  0.119192     0.037711  ... -0.029856  0.031488   -0.013227
2005       0.005801  0.031062     0.003478  ... -0.023451  0.016663   -0.052799
2006      -0.012912  0.004027     0.007662  ... -0.025372  0.035866   -0.059105
2007       0.007661 -0.005631     0.007843  ...  0.054833 -0.008606   -0.023053
2008       0.013122 -0.112217    -0.002355  ...  0.009437  0.006127   -0.058447
2009       0.024041 -0.053345    -0.105295  ...  0.084724 -0.043050    0.018238
2010      -0.041188  0.091792     0.057801  ... -0.003839  0.040807   -0.006550
2011      -0.053577  0.030056    -0.015843  ...  0.031092  0.038211    0.010924
2012       0.009032 -0.015702    -0.006266  ...  0.047440 -0.003432   -0.045033
2013       0.010354 -0.055213     0.015032  ...  0.003064  0.001255   -0.035604
2014      -0.030787 -0.015373     0.042127  ... -0.019639  0.019443    0.039196
2015       0.029555  0.042597    -0.027053  ...  0.051693 -0.035899   -0.000059
2016       0.058761  0.057544    -0.031912  ...  0.040791 -0.066452    0.005078
2017      -0.004872  0.063624     0.040631  ... -0.055503  0.020519   -0.017879

[48 rows x 9 columns]
log ratio intensity final:
 Category    Highway       Air  All Freight  ...  Pipeline      Rail    Waterborne
Year                                        ...                                  
1970       0.000000       NaN          NaN  ...  0.128831 -0.026153           NaN
1971      -0.027316 -0.043414    -0.012914  ... -0.004124  0.037319 -1.005034e-02
1972       0.033525 -0.100436     0.016967  ...  0.018965 -0.004281 -1.005034e-02
1973       0.027221  0.037977     0.000516  ... -0.048098 -0.052099 -1.005034e-02
1974       0.013974 -0.024277    -0.000855  ... -0.046595  0.004510 -1.005034e-02
1975       0.049583  0.007935     0.022828  ... -0.054398  0.009581 -1.005034e-02
1976      -0.031657 -0.123376    -0.038124  ... -0.072893 -0.009743 -1.005034e-02
1977       0.020220 -0.119185     0.004660  ... -0.004169 -0.017069 -1.005034e-02
1978       0.025701 -0.100809     0.006479  ... -0.011094 -0.042069 -1.005034e-02
1979       0.032503 -0.067322     0.025405  ...  0.085907 -0.036826 -1.005034e-02
1980       0.073661 -0.039262     0.050441  ...  0.050371 -0.034720 -1.005034e-02
1981       0.048134  0.055493     0.034299  ...  0.033275 -0.037424 -1.005034e-02
1982      -0.005092 -0.056566    -0.007727  ...  0.016065 -0.040086 -1.005034e-02
1983      -0.057770 -0.054941    -0.063693  ... -0.137763 -0.050466 -1.005034e-02
1984      -0.015754  0.028985    -0.011764  ...  0.014315 -0.029773 -1.005034e-02
1985      -0.011386 -0.022834    -0.013376  ... -0.015210 -0.025175 -1.005034e-02
1986      -0.004073 -0.008345    -0.002925  ...  0.027281 -0.023388 -1.005034e-02
1987      -0.021012 -0.051666    -0.021136  ...  0.019990 -0.063418 -1.005034e-02
1988      -0.023860 -0.007687    -0.006954  ...  0.118804 -0.028598 -1.005034e-02
1989      -0.001499 -0.017014    -0.008368  ... -0.040459 -0.014889 -1.005034e-02
1990       0.021944  0.012183     0.019625  ...  0.055551 -0.037625 -1.005034e-02
1991      -0.007010 -0.080484    -0.029212  ... -0.124429 -0.073407 -1.005034e-02
1992      -0.004548  0.003081    -0.009433  ... -0.058034  0.005775 -1.005034e-02
1993      -0.017064 -0.023993    -0.011346  ...  0.032440 -0.009745 -1.005034e-02
1994      -0.012444 -0.028611    -0.003518  ...  0.070174 -0.003684 -1.005034e-02
1995       0.007347 -0.012794    -0.001004  ... -0.021108 -0.040955 -1.005034e-02
1996      -0.003448 -0.034769    -0.005826  ... -0.001926 -0.010199 -1.005034e-02
1997      -0.032377 -0.007894    -0.018486  ...  0.048228  0.005767 -1.005034e-02
1998       0.039699  0.000369     0.011559  ... -0.150921 -0.016024 -3.831886e-02
1999       0.013859  0.006566     0.011733  ...  0.003547 -0.005037  3.831886e-02
2000       0.026400 -0.046065     0.011555  ... -0.045531 -0.030157  1.492565e-02
2001      -0.020635  0.013248    -0.015535  ...  0.022502 -0.017274 -6.503247e-02
2002       0.015146 -0.080708     0.009534  ...  0.029888 -0.001965  2.220450e-16
2003      -0.055369 -0.037045    -0.052729  ... -0.088227 -0.003318 -7.936550e-03
2004       0.001292 -0.077453    -0.009432  ... -0.051579 -0.010428 -4.065601e-02
2005       0.018865 -0.011846     0.016928  ...  0.050994 -0.010949  2.220450e-16
2006       0.022835  0.003857     0.017354  ...  0.018030 -0.020849 -2.521142e-02
2007      -0.000244 -0.022774    -0.004440  ... -0.001024 -0.029835 -4.348511e-02
2008      -0.008066 -0.014359    -0.005699  ...  0.034824 -0.047837  1.133287e-01
2009       0.002520 -0.027640     0.000860  ...  0.054286 -0.046099 -1.133287e-01
2010       0.015912 -0.042007     0.004783  ... -0.048085 -0.009826 -3.620305e-02
2011       0.008542 -0.004591     0.008400  ...  0.004812  0.030611 -2.803922e-02
2012      -0.006094 -0.038398    -0.005514  ...  0.019477 -0.011124 -1.110220e-16
2013      -0.000768 -0.015498     0.012644  ...  0.112885  0.005100  9.918032e-02
2014       0.002857 -0.028138    -0.021932  ... -0.196300 -0.013061 -8.506244e-02
2015      -0.008797 -0.005978    -0.011269  ... -0.056517  0.017246  4.662013e-03
2016      -0.001827 -0.013542    -0.000904  ...  0.003648  0.013182  0.000000e+00
2017      -0.010327 -0.023862    -0.004785  ...  0.064285 -0.027219  0.000000e+00

[48 rows x 9 columns]
log ratio structure final:
 Category    Highway  Air  All Freight  ...  Pipeline  Rail  Waterborne
Year                                   ...                            
1970            NaN  NaN          NaN  ...       NaN   NaN         NaN
1971      -0.002305  0.0     0.037469  ...       0.0   0.0         0.0
1972       0.006819  0.0     0.012897  ...       0.0   0.0         0.0
1973      -0.000737  0.0     0.007623  ...       0.0   0.0         0.0
1974       0.003557  0.0    -0.005375  ...       0.0   0.0         0.0
1975       0.030699  0.0     0.026275  ...       0.0   0.0         0.0
1976      -0.016617  0.0     0.014454  ...       0.0   0.0         0.0
1977      -0.001695  0.0     0.017793  ...       0.0   0.0         0.0
1978       0.001710  0.0    -0.047097  ...       0.0   0.0         0.0
1979      -0.007969  0.0    -0.013133  ...       0.0   0.0         0.0
1980       0.008892  0.0    -0.051588  ...       0.0   0.0         0.0
1981       0.010086  0.0    -0.010720  ...       0.0   0.0         0.0
1982       0.008376  0.0     0.040146  ...       0.0   0.0         0.0
1983      -0.011417  0.0     0.010902  ...       0.0   0.0         0.0
1984      -0.002026  0.0     0.010566  ...       0.0   0.0         0.0
1985       0.003555  0.0     0.013925  ...       0.0   0.0         0.0
1986      -0.006884  0.0     0.019938  ...       0.0   0.0         0.0
1987       0.000664  0.0     0.003986  ...       0.0   0.0         0.0
1988      -0.005522  0.0     0.010779  ...       0.0   0.0         0.0
1989       0.001315  0.0     0.033807  ...       0.0   0.0         0.0
1990      -0.001352  0.0    -0.001508  ...       0.0   0.0         0.0
1991      -0.000905  0.0     0.003299  ...       0.0   0.0         0.0
1992      -0.001386  0.0     0.003748  ...       0.0   0.0         0.0
1993       0.001818  0.0     0.031420  ...       0.0   0.0         0.0
1994       0.002984  0.0     0.007104  ...       0.0   0.0         0.0
1995      -0.004562  0.0    -0.004092  ...       0.0   0.0         0.0
1996      -0.001202  0.0     0.011937  ...       0.0   0.0         0.0
1997      -0.000155  0.0     0.036064  ...       0.0   0.0         0.0
1998      -0.001933  0.0     0.009677  ...       0.0   0.0         0.0
1999       0.000229  0.0    -0.001503  ...       0.0   0.0         0.0
2000      -0.001787  0.0     0.008707  ...       0.0   0.0         0.0
2001       0.001545  0.0     0.002712  ...       0.0   0.0         0.0
2002       0.003331  0.0     0.018443  ...       0.0   0.0         0.0
2003       0.002427  0.0     0.000875  ...       0.0   0.0         0.0
2004      -0.000814  0.0    -0.011756  ...       0.0   0.0         0.0
2005      -0.001350  0.0     0.003809  ...       0.0   0.0         0.0
2006       0.004704  0.0    -0.006487  ...       0.0   0.0         0.0
2007       0.000000  0.0     0.008920  ...       0.0   0.0         0.0
2008       0.007561  0.0     0.009910  ...       0.0   0.0         0.0
2009       0.004751  0.0     0.024970  ...       0.0   0.0         0.0
2010      -0.016383  0.0    -0.038435  ...       0.0   0.0         0.0
2011       0.000746  0.0    -0.033614  ...       0.0   0.0         0.0
2012       0.002275  0.0     0.011739  ...       0.0   0.0         0.0
2013      -0.002548  0.0     0.003112  ...       0.0   0.0         0.0
2014       0.002176  0.0    -0.022846  ...       0.0   0.0         0.0
2015       0.000032  0.0     0.027468  ...       0.0   0.0         0.0
2016       0.001072  0.0     0.049157  ...       0.0   0.0         0.0
2017      -0.001868  0.0    -0.006358  ...       0.0   0.0         0.0

[48 rows x 7 columns]
intensity component:
 Year
1970    0.128831
1971   -0.026660
1972    0.035711
1973   -0.044150
1974   -0.062023
1975   -0.033487
1976   -0.125354
1977   -0.020664
1978   -0.016040
1979    0.099510
1980    0.068531
1981    0.065035
1982   -0.016015
1983   -0.231367
1984   -0.001788
1985   -0.030430
1986    0.031964
1987   -0.019935
1988    0.096717
1989   -0.058018
1990    0.064801
1991   -0.194271
1992   -0.067760
1993    0.025178
1994    0.063460
1995   -0.027755
1996   -0.015108
1997    0.017336
1998   -0.138859
1999    0.023299
2000   -0.050815
2001   -0.005939
2002    0.037642
2003   -0.145430
2004   -0.079208
2005    0.052520
2006    0.031201
2007   -0.012478
2008    0.017229
2009    0.052932
2010   -0.041745
2011    0.019152
2012    0.006584
2013    0.125454
2014   -0.227242
2015   -0.088031
2016    0.001709
2017    0.050191
dtype: float64
__________________________ TestLMDI.test_components ___________________________

self = <lmdi_test.TestLMDI object at 0x00000240551D4DD8>
sector = 'transportation', acceptable_pct_difference = 0.05

    def test_components(self, sector='transportation', acceptable_pct_difference=0.05):
        """Write test_calc_ASI to test LMDI class.
    
        - Test both additive and multiplicative forms
        - Test all sectors
        """
    
        pnnl_eii_match = {'Passenger Highway': 'Highway', 'Freight Total': 'All_Freight', "Component Intensity          Index": 'Index',
                          'Product: Activity x Structure x Intensity': 'Effect', 'Structure: Lower level': "Structure: Next lower level",
                          'Activity (passenger-miles)': 'Activity', 'Pipelines': 'Pipeline'}
        eii = self.eii_output_factory(sector)
    
        pnnl_data = self.get_pnnl_input(sector, 'intermediate')
    
        pnnl_output = self.get_pnnl_data(sector)
        pnnl_output = pnnl_output['results']
        print('pnnl_output columns:\n', pnnl_output.columns)
        for p, e in pnnl_eii_match.items():
            pnnl_output = pnnl_output.replace(p, e)
    
        output_directory = 'C:/Users/irabidea/Desktop/LMDI_Results/'
        eii_results_data = pd.read_csv(f'{output_directory}transportation_results2.csv').rename(columns={'@timeseries|Year': 'Year'}).set_index('Year')
        eii_results_data = eii_results_data.replace('Highway', 'Freight Trucks')
        levels = eii_results_data['lower_level'].unique()
        print('pnnl levels:', pnnl_output['Nest level'].unique())
        model = 'multiplicative'
    
        bools_list = []
    
        for e_type in pnnl_output['Energy Type'].unique():
    
            for level_ in levels:
                print('level_:', level_)
    
                print('e_type:', e_type)
                if level_ == np.nan:
                    continue
    
                eii_data = eii_results_data[(eii_results_data['lower_level'] == level_) & (eii_results_data['@filter|EnergyType'] == e_type.lower()) & (eii_results_data['@filter|Model'] == model.capitalize())]
                eii_effect = eii_data[['@filter|Measure|Effect']].rename(columns={'@filter|Measure|Effect': 'Effect'})
                eii_intensity = eii_data[['@filter|Measure|Intensity']].rename(columns={'@filter|Measure|Intensity': 'Intensity'})
                eii_structure = eii_data[['@filter|Measure|Structure']].rename(columns={'@filter|Measure|Structure': 'Structure'})
                eii_lower_level_structure = eii_data[['lower_level_structure']].rename(columns={'lower_level_structure': 'Structure: Next lower level'})
                eii_activity = eii_data[['@filter|Measure|Activity']].rename(columns={'@filter|Measure|Activity': 'Activity'})
    
                data_ = pnnl_output[(pnnl_output['Nest level'] == level_) & (pnnl_output['Energy Type'] == e_type) & (pnnl_output['Sector'] == 'transportation')]
                print('categories:', data_['Category'].unique())
    
                pnnl_intensity = data_[data_['Category'] == 'Intensity'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                pnnl_intensity.columns.name = None
    
                pnnl_activity = data_[data_['Category'] == 'Activity'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                pnnl_activity.columns.name = None
    
                try:
                    pnnl_lower_level_structure = data_[data_['Category'] == 'Structure: Next lower level'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                    pnnl_lower_level_structure.columns.name = None
                    if not pnnl_lower_level_structure.empty:
                        acceptable_bool_lower_level_structure = self.pct_diff(pnnl_lower_level_structure, eii_lower_level_structure, acceptable_pct_difference, sector)
                        print(f"{level_} lower level structure is {acceptable_bool_lower_level_structure}")
                        bools_list.append(acceptable_bool_lower_level_structure)
    
                except KeyError:
                    pass
    
                pnnl_structure = data_[data_['Category'] == 'Structure'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                pnnl_structure.columns.name = None
    
                pnnl_effect = data_[data_['Category'] == 'Effect'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                pnnl_effect.columns.name = None
    
                acceptable_bool_effect = self.pct_diff(pnnl_effect, eii_effect, acceptable_pct_difference, sector)
                print(f"{level_} effect is {acceptable_bool_effect}")
                bools_list.append(acceptable_bool_effect)
    
                acceptable_bool_intensity = self.pct_diff(pnnl_intensity, eii_intensity, acceptable_pct_difference, sector)
                print(f"{level_} intensity is {acceptable_bool_intensity}")
                bools_list.append(acceptable_bool_intensity)
    
                acceptable_bool_activity = self.pct_diff(pnnl_activity, eii_activity, acceptable_pct_difference, sector)
                print(f"{level_} activity is {acceptable_bool_activity}")
                bools_list.append(acceptable_bool_activity)
    
                acceptable_bool_structure = self.pct_diff(eii_structure, eii_structure, acceptable_pct_difference, sector)
                print(f"{level_} structure is {acceptable_bool_structure}")
                bools_list.append(acceptable_bool_structure)
    
>       assert all(bools_list)
E       assert False
E        +  where False = all([True, True, True, True, True, True, ...])

tests\lmdi_test.py:870: AssertionError
---------------------------- Captured stdout call -----------------------------
pnnl_Cars and SWB Vehicles.csv failed with error could not convert string to float: 'raw_data' for input_data, 
 print Index(['Sector', 'Nest level', 'Unit', 'Data Type', 'Energy Type', 'datatype',
       'Year', 'Passenger Car', 'SWB Vehicles', 'Cars and SWB Vehicles'],
      dtype='object')
pnnl_Light Trucks and LWB.csv failed with error could not convert string to float: 'Tbtu' for input_data, 
 print Index(['Sector', 'Nest level', 'Unit', 'Data Type', 'Energy Type', 'Year',
       'Light Trucks', 'LWB Vehicles', 'Light Trucks and LWB Vehicles'],
      dtype='object')
pnnl_Passenger Highway.csv failed with error could not convert string to float: 'Tbtu' for input_data, 
 print Index(['Sector', 'Nest level', 'Unit', 'Data Type', 'Energy Type', 'Year',
       'Passenger Cars and Trucks', 'Buses', 'Paratransit',
       'Passenger Highway'],
      dtype='object')
pnnl_weights.csv failed with error could not convert string to float: 'Passenger Cars and Trucks Weights ' for results, 
 print Index(['Sector', 'Nest level', 'Energy Type', 'Unit', 'Data Type', 'Year',
       'All Passenger Weights ', 'All Freight Weights', 'Unnamed: 8',
       'Weighted Activity Index', 'Index of  Aggregate Intensity',
       'Structure:Passenger vs Freight (*)', 'Structure: Lower level (**)',
       'Component Intensity      Index', 'Effect', 'Actual Energy Use',
       'Total Structure', 'Unnamed: 17', 'Unnamed: 18'],
      dtype='object')
pnnl_output columns:
 Index(['Sector', 'Nest level', 'Data Type', 'Energy Type', 'Year', 'Category',
       'Value'],
      dtype='object')
pnnl levels: ['Buses' 'Cars and SWB Vehicles' 'All_Freight' 'Freight Trucks'
 'Light Trucks and LWB' 'Highway' 'Passenger Total' 'Passenger-Air'
 'Passenger-Rail' 'Personal Vehicles' 'Pipeline' 'transportation'
 'Urban-Rail']
level_: Freight Trucks
e_type: Deliv
categories: ['Index of  Aggregate Intensity' 'Intensity' 'Single-Unit Truck Weights'
 'Effect' 'Unnamed: 8' 'Structure' 'Actual Energy Use'
 'Combination Truck Weights' 'Structure x Intensity Index' 'Activity']
Freight Trucks effect is True
Freight Trucks intensity is True
Freight Trucks activity is True
Freight Trucks structure is True
level_: Pipeline
e_type: Deliv
categories: ['Index of  Aggregate Intensity' 'Intensity' 'Effect' 'Unnamed: 8'
 'Structure' 'Actual Energy Use' 'Oil Pipeline Weights'
 'Structure x Intensity Index' 'Natural Gas Pipeline Weights' 'Activity']
Pipeline effect is True
Pipeline intensity is True
Pipeline activity is True
Pipeline structure is True
level_: All_Freight
e_type: Deliv
categories: ['Waterborne Weights' 'Rail Weights' 'Total Structure'
 'Index of  Aggregate Intensity' 'Effect' 'Pipeline Weights' 'Structure'
 '  Highway Weights' 'Actual Energy Use' 'Air Weights' 'Intensity'
 'Structure: Next lower level' 'Activity']
All_Freight lower level structure is True
All_Freight effect is False
All_Freight intensity is False
All_Freight activity is True
All_Freight structure is True
level_: nan
e_type: Deliv
categories: []
nan effect is False
nan intensity is False
nan activity is False
nan structure is False
=========================== short test summary info ===========================
FAILED tests/lmdi_test.py::TestLMDI::test_multiplicative_decomposition - Attr...
FAILED tests/lmdi_test.py::TestLMDI::test_calc_asi - ValueError: Unable to co...
FAILED tests/lmdi_test.py::TestLMDI::test_components - assert False
ERROR tests/lmdi_test.py::TestLMDI::test_calc_component
============== 3 failed, 6 passed, 1 error in 774.54s (0:12:54) ===============
