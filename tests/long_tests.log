============================= test session starts =============================
platform win32 -- Python 3.6.5, pytest-5.4.3, py-1.8.0, pluggy-0.12.0
rootdir: C:\Users\irabidea\Documents\GitHub\EnergyIntensityIndicators
collected 7 items

tests\lmdi_test.py .FF..FF                                               [100%]

================================== FAILURES ===================================
_____________________ TestLMDI.test_calculate_log_changes _____________________

self = <lmdi_test.TestLMDI object at 0x0000024A09334F98>
sector = 'transportation'

    def test_calculate_log_changes(self, sector='transportation'):
        eii = self.eii_output_factory(sector)
    
        input_data = [[1.2759, 0.9869],
                      [1.2650, 0.9743],
                      [1.2579, 0.9910],
                      [1.2634, 0.9915],
                      [1.2396, 0.9906]]
    
    
        input_df = pd.DataFrame(input_data,
                                     index=[1970, 1971, 1972, 1973, 1974],
                                     columns=['All_Passenger', 'All_Freight'])
    
        log_ratio_df = eii.calculate_log_changes(input_df)
        log_ratio_df = log_ratio_df.round(4)
        comparison_output = [[np.nan, np.nan],
                             [-0.0086, -0.0129],
                             [-0.0056, 0.0170],
                             [0.0044, 0.0005],
                             [-0.0190, -0.0009]]
    
        comparison_df = pd.DataFrame(comparison_output,
                                     index=[1970, 1971, 1972, 1973, 1974],
                                     columns=['All_Passenger', 'All_Freight'])
        print('comparison_df:\n', comparison_df)
        print('log_ratio_df:\n', log_ratio_df)
>       assert log_ratio_df.equals(comparison_df)
E       assert False
E        +  where False = <bound method NDFrame.equals of       All_Passenger  All_Freight\n1970            NaN          NaN\n1971        -0.0086      -0.0128\n1972        -0.0056       0.0170\n1973         0.0044       0.0005\n1974        -0.0190      -0.0009>(      All_Passenger  All_Freight\n1970            NaN          NaN\n1971        -0.0086      -0.0129\n1972        -0.0056       0.0170\n1973         0.0044       0.0005\n1974        -0.0190      -0.0009)
E        +    where <bound method NDFrame.equals of       All_Passenger  All_Freight\n1970            NaN          NaN\n1971        -0.0086      -0.0128\n1972        -0.0056       0.0170\n1973         0.0044       0.0005\n1974        -0.0190      -0.0009> =       All_Passenger  All_Freight\n1970            NaN          NaN\n1971        -0.0086      -0.0128\n1972        -0.0056       0.0170\n1973         0.0044       0.0005\n1974        -0.0190      -0.0009.equals

tests\lmdi_test.py:315: AssertionError
---------------------------- Captured stdout call -----------------------------
comparison_df:
       All_Passenger  All_Freight
1970            NaN          NaN
1971        -0.0086      -0.0129
1972        -0.0056       0.0170
1973         0.0044       0.0005
1974        -0.0190      -0.0009
log_ratio_df:
       All_Passenger  All_Freight
1970            NaN          NaN
1971        -0.0086      -0.0128
1972        -0.0056       0.0170
1973         0.0044       0.0005
1974        -0.0190      -0.0009
_________________________ TestLMDI.test_compute_index _________________________

self = <lmdi_test.TestLMDI object at 0x0000024A093C6668>

    def test_compute_index(self):
        eii = MultiplicativeLMDI()
    
        results = [[0.9705, 1.0386, 1.0037],
                   [0.9957, 1.0329, 1.0054],
                   [0.9982, 1.0145, 1.0052],
                   [1.0076, 1.0165, 1.0066],
                   [0.9814, 1.0412, 1.0016]]
    
        results = pd.DataFrame(results,
                               index=[1983, 1984, 1985, 1986, 1987],
                               columns=['Intensity Index', 'Activity Index', 'Structure Index'])
    
        for col in results.columns:
>           results[col] = eii.compute_index(results[col], 1985)

tests\lmdi_test.py:368: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
EnergyIntensityIndicators\multiplicative_lmdi.py:79: in compute_index
    index.loc[y, 'index'] = index.loc[y - 1, ['index']].multiply(component.loc[y])
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\indexing.py:190: in __setitem__
    self._setitem_with_indexer(indexer, value)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\indexing.py:642: in _setitem_with_indexer
    value = self._align_series(indexer, Series(value))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pandas.core.indexing._LocIndexer object at 0x0000024A09408688>
indexer = (1, 0), ser = index    NaN
Name: 1983, dtype: object
multiindex_indexer = False

    def _align_series(self, indexer, ser, multiindex_indexer=False):
        """
        Parameters
        ----------
        indexer : tuple, slice, scalar
            The indexer used to get the locations that will be set to
            `ser`
    
        ser : pd.Series
            The values to assign to the locations specified by `indexer`
    
        multiindex_indexer : boolean, optional
            Defaults to False. Should be set to True if `indexer` was from
            a `pd.MultiIndex`, to avoid unnecessary broadcasting.
    
    
        Returns:
        --------
        `np.array` of `ser` broadcast to the appropriate shape for assignment
        to the locations selected by `indexer`
    
        """
        if isinstance(indexer, (slice, np.ndarray, list, Index)):
            indexer = tuple([indexer])
    
        if isinstance(indexer, tuple):
    
            # flatten np.ndarray indexers
            def ravel(i):
                return i.ravel() if isinstance(i, np.ndarray) else i
            indexer = tuple(map(ravel, indexer))
    
            aligners = [not com.is_null_slice(idx) for idx in indexer]
            sum_aligners = sum(aligners)
            single_aligner = sum_aligners == 1
            is_frame = self.obj.ndim == 2
            is_panel = self.obj.ndim >= 3
            obj = self.obj
    
            # are we a single alignable value on a non-primary
            # dim (e.g. panel: 1,2, or frame: 0) ?
            # hence need to align to a single axis dimension
            # rather that find all valid dims
    
            # frame
            if is_frame:
                single_aligner = single_aligner and aligners[0]
    
            # panel
            elif is_panel:
                single_aligner = (single_aligner and
                                  (aligners[1] or aligners[2]))
    
            # we have a frame, with multiple indexers on both axes; and a
            # series, so need to broadcast (see GH5206)
            if (sum_aligners == self.ndim and
                    all(is_sequence(_) for _ in indexer)):
                ser = ser.reindex(obj.axes[0][indexer[0]], copy=True)._values
    
                # single indexer
                if len(indexer) > 1 and not multiindex_indexer:
                    len_indexer = len(indexer[1])
                    ser = np.tile(ser, len_indexer).reshape(len_indexer, -1).T
    
                return ser
    
            for i, idx in enumerate(indexer):
                ax = obj.axes[i]
    
                # multiple aligners (or null slices)
                if is_sequence(idx) or isinstance(idx, slice):
                    if single_aligner and com.is_null_slice(idx):
                        continue
                    new_ix = ax[idx]
                    if not is_list_like_indexer(new_ix):
                        new_ix = Index([new_ix])
                    else:
                        new_ix = Index(new_ix)
                    if ser.index.equals(new_ix) or not len(new_ix):
                        return ser._values.copy()
    
                    return ser.reindex(new_ix)._values
    
                # 2 dims
                elif single_aligner and is_frame:
    
                    # reindex along index
                    ax = self.obj.axes[1]
                    if ser.index.equals(ax) or not len(ax):
                        return ser._values.copy()
                    return ser.reindex(ax)._values
    
                # >2 dims
                elif single_aligner:
    
                    broadcast = []
                    for n, labels in enumerate(self.obj._get_plane_axes(i)):
    
                        # reindex along the matching dimensions
                        if len(labels & ser.index):
                            ser = ser.reindex(labels)
                        else:
                            broadcast.append((n, len(labels)))
    
                    # broadcast along other dims
                    ser = ser._values.copy()
                    for (axis, l) in broadcast:
                        shape = [-1] * (len(broadcast) + 1)
                        shape[axis] = l
                        ser = np.tile(ser, l).reshape(shape)
    
                    if self.obj.ndim == 3:
                        ser = ser.T
    
                    return ser
    
        elif is_scalar(indexer):
            ax = self.obj._get_axis(1)
    
            if ser.index.equals(ax):
                return ser._values.copy()
    
            return ser.reindex(ax)._values
    
>       raise ValueError('Incompatible indexer with Series')
E       ValueError: Incompatible indexer with Series

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\indexing.py:783: ValueError
_ TestLMDI.test_multiplicative_lmdi_log_mean_divisia_weights[transportation] __

x = array([[nan, nan, nan, nan, nan],
       ['0.545642404', '0.04360446', '0.212600641', '0.142537983',
        '0.055614....013382983'],
       ['0.781067717', '0.050052674', '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
y = array([[       nan,        nan,        nan,        nan,        nan],
       [0.5456424 , 0.04360446, 0.21260064, 0.142... 0.04889566, 0.09450495, 0.06360409, 0.01338298],
       [0.78106772, 0.05005267, 0.09526638, 0.06056169, 0.01305154]])

    def na_op(x, y):
        import pandas.core.computation.expressions as expressions
    
        try:
>           result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:2001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

op = <built-in function sub>, op_str = '-'
a = array([[nan, nan, nan, nan, nan],
       ['0.545642404', '0.04360446', '0.212600641', '0.142537983',
        '0.055614....013382983'],
       ['0.781067717', '0.050052674', '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
b = array([[       nan,        nan,        nan,        nan,        nan],
       [0.5456424 , 0.04360446, 0.21260064, 0.142... 0.04889566, 0.09450495, 0.06360409, 0.01338298],
       [0.78106772, 0.05005267, 0.09526638, 0.06056169, 0.01305154]])
use_numexpr = True, eval_kwargs = {}

    def evaluate(op, op_str, a, b, use_numexpr=True,
                 **eval_kwargs):
        """ evaluate and return the expression of the op on a and b
    
            Parameters
            ----------
    
            op :    the actual operand
            op_str: the string version of the op
            a :     left operand
            b :     right operand
            use_numexpr : whether to try to use numexpr (default True)
            """
    
        use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)
        if use_numexpr:
>           return _evaluate(op, op_str, a, b, **eval_kwargs)

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\computation\expressions.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

op = <built-in function sub>, op_str = '-'
a = array([[nan, nan, nan, nan, nan],
       ['0.545642404', '0.04360446', '0.212600641', '0.142537983',
        '0.055614....013382983'],
       ['0.781067717', '0.050052674', '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
b = array([[       nan,        nan,        nan,        nan,        nan],
       [0.5456424 , 0.04360446, 0.21260064, 0.142... 0.04889566, 0.09450495, 0.06360409, 0.01338298],
       [0.78106772, 0.05005267, 0.09526638, 0.06056169, 0.01305154]])
eval_kwargs = {}

    def _evaluate_standard(op, op_str, a, b, **eval_kwargs):
        """ standard evaluation """
        if _TEST_MODE:
            _store_test_result(False)
        with np.errstate(all='ignore'):
>           return op(a, b)
E           TypeError: unsupported operand type(s) for -: 'str' and 'float'

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\computation\expressions.py:68: TypeError

During handling of the above exception, another exception occurred:

self = <lmdi_test.TestLMDI object at 0x0000024A093BCA90>
sector = 'transportation', acceptable_pct_difference = 0.05

    @pytest.mark.parametrize('sector', ['transportation']) # 'residential', 'commercial', 'industrial', 'electricity',
    def test_multiplicative_lmdi_log_mean_divisia_weights(self, sector, acceptable_pct_difference=0.05):
        """Multiplicative test should use original PNNL data (compiled for #13)
        Test should be parametrized to loop through all sectors.
        """
        eii = self.eii_output_factory(sector)
    
        pnnl_data = self.get_pnnl_input(sector, 'intermediate')
        eii_, pnnl_data_ = self.input_data(sector, level_of_aggregation_='All_Freight.Pipeline')
    
        bools_list = []
    
        for e_type in pnnl_data['Energy Type'].unique():
    
            for level_ in pnnl_data['Nest level'].unique():
                energy_data = pnnl_data_[e_type]['energy']
                energy_shares = pnnl_data[(pnnl_data['Energy Type'] == e_type) & (pnnl_data['Data Type'] == 'Energy Shares') & (pnnl_data['Nest level'] == level_)]
                energy_shares = energy_shares[['Year', 'Category', 'Value']]
                energy_shares['Value'] = energy_shares['Value'].astype(float)
                energy_shares = energy_shares.pivot(index='Year', columns='Category', values='Value')
                print('energy_share columns (should just be pipeline):', energy_shares.columns)
    
                energy_shares = energy_shares.dropna(axis=1, how='all')
                total_label = level_
                model_ = MultiplicativeLMDI(energy_data, energy_shares, 1985, 2017, total_label)
                eii_output = model_.log_mean_divisia_weights()
                print('eii_output log mean divisia weights: \n', eii_output.head())
    
                # pnnl_data_raw = self.get_pnnl_data(sector)['results']
                # weights_cols = [cat for cat in pnnl_data_raw['Category'].unique() if cat.endswith('eights')]
                # pnnl_weights = pnnl_data_raw[pnnl_data_raw['Category'].isin(weights_cols)]
                print('pnnl_data:\n', pnnl_data)
                pnnl_weights = pnnl_data[(pnnl_data['Energy Type'] == e_type) & (pnnl_data['Data Type'] == 'Log Mean Divisia Weights (normalized)') & (pnnl_data['Nest level'] == level_)]
                pnnl_weights = pnnl_weights[['Year', 'Category', 'Value']]
    
                print('pnnl_weights:\n', pnnl_weights)
    
                pnnl_weights_ = pnnl_weights.pivot(index='Year', columns='Category', values='Value')
                pnnl_weights_.columns.name = None
                print('pnnl_weights_:\n', pnnl_weights_)
    
                pnnl_weights_ = pnnl_weights_.dropna(axis=1, how='all')
                pnnl_weights_ = pnnl_weights_.rename(columns={col: f'log_mean_weights_{col}' for col in pnnl_weights_.columns})
                print('pnnl_weights_:\n', pnnl_weights_)
    
>               acceptable_bool = self.pct_diff(pnnl_weights_, eii_output, acceptable_pct_difference, sector)

tests\lmdi_test.py:507: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\lmdi_test.py:581: in pct_diff
    diff_df = pnnl_data.subtract(eii_data)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:2023: in f
    return self._combine_frame(other, pass_op, fill_value, level)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\frame.py:5090: in _combine_frame
    result = _arith_op(this.values, other.values)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\frame.py:5084: in _arith_op
    return func(left, right)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:2003: in na_op
    result = masked_arith_op(x, y, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

x = array([[nan, nan, nan, nan, nan],
       ['0.545642404', '0.04360446', '0.212600641', '0.142537983',
        '0.055614....013382983'],
       ['0.781067717', '0.050052674', '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
y = array([[       nan,        nan,        nan,        nan,        nan],
       [0.5456424 , 0.04360446, 0.21260064, 0.142... 0.04889566, 0.09450495, 0.06360409, 0.01338298],
       [0.78106772, 0.05005267, 0.09526638, 0.06056169, 0.01305154]])
op = <built-in function sub>

    def masked_arith_op(x, y, op):
        """
        If the given arithmetic operation fails, attempt it again on
        only the non-null elements of the input array(s).
    
        Parameters
        ----------
        x : np.ndarray
        y : np.ndarray, Series, Index
        op : binary operator
        """
        # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes
        # the logic valid for both Series and DataFrame ops.
        xrav = x.ravel()
        assert isinstance(x, (np.ndarray, ABCSeries)), type(x)
        if isinstance(y, (np.ndarray, ABCSeries, ABCIndexClass)):
            dtype = find_common_type([x.dtype, y.dtype])
            result = np.empty(x.size, dtype=dtype)
    
            # PeriodIndex.ravel() returns int64 dtype, so we have
            # to work around that case.  See GH#19956
            yrav = y if is_period_dtype(y) else y.ravel()
            mask = notna(xrav) & notna(yrav)
    
            if yrav.shape != mask.shape:
                # FIXME: GH#5284, GH#5035, GH#19448
                # Without specifically raising here we get mismatched
                # errors in Py3 (TypeError) vs Py2 (ValueError)
                # Note: Only = an issue in DataFrame case
                raise ValueError('Cannot broadcast operands together.')
    
            if mask.any():
                with np.errstate(all='ignore'):
                    result[mask] = op(xrav[mask],
>                                     com.values_from_object(yrav[mask]))
E                   TypeError: unsupported operand type(s) for -: 'str' and 'float'

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:1009: TypeError
---------------------------- Captured stdout call -----------------------------
      Single-Unit Truck  Combination Truck  ...  Oil Pipeline  Natural Gas Pipeline
Year                                        ...                                    
1949                NaN                NaN  ...           NaN                   NaN
1950                NaN                NaN  ...      129000.0            129.437926
1951                NaN                NaN  ...      152000.0            198.463376
1952                NaN                NaN  ...      158000.0            213.630417
1953                NaN                NaN  ...      170000.0            237.453734
1954                NaN                NaN  ...      179000.0            237.764065
1955                NaN                NaN  ...      203000.0            252.848626
1956                NaN                NaN  ...      230000.0            305.147132
1957                NaN                NaN  ...      223000.0            308.511285
1958                NaN                NaN  ...      211000.0            321.899851
1959                NaN                NaN  ...      227000.0            360.177788
1960                NaN                NaN  ...      229000.0            357.834325
1961                NaN                NaN  ...      233000.0            389.312817
1962                NaN                NaN  ...      238000.0            394.353376
1963                NaN           0.000000  ...      253000.0            436.920273
1964                NaN           0.000000  ...      269000.0            449.072670
1965                NaN           0.000000  ...      306000.0            516.040244
1966           0.000000           0.000000  ...      333000.0            551.948943
1967           0.000000           0.000000  ...      361000.0            593.600312
1968           0.000000           0.000000  ...      391000.0            609.284915
1969           0.000000           0.000000  ...      411000.0            650.521822
1970         888.413336        1091.711420  ...      431000.0            778.391688
1971         944.112565        1128.435166  ...      444000.0            800.407995
1972        1084.485544        1206.432138  ...      476000.0            825.806618
1973        1185.178405        1341.001136  ...      507000.0            784.870686
1974        1177.732134        1349.103500  ...      506000.0            720.862148
1975        1213.502200        1363.533043  ...      507000.0            628.350758
1976        1277.369919        1441.540417  ...      515000.0            591.013791
1977        1403.176242        1606.712888  ...      546000.0            574.141017
1978        1547.433559        1796.178344  ...      586000.0            571.750331
...                 ...                ...  ...           ...                   ...
1988        1708.634864        2241.517837  ...      601000.0            661.709355
1989        1726.979704        2317.888922  ...      584000.0            678.304041
1990        1855.637298        2377.456615  ...      584000.0            711.187303
1991        1815.809994        2478.528803  ...      579000.0            648.120811
1992        1830.802864        2539.537151  ...      589000.0            633.467345
1993        1886.653726        2617.972362  ...      593000.0            672.914756
1994        2009.086065        2753.647175  ...      591000.0            738.722238
1995        2051.508898        2921.671724  ...      601000.0            754.860991
1996        2096.128437        2985.451865  ...      619200.0            766.837061
1997        2134.869496        3003.701973  ...      616500.0            809.977210
1998        2173.376382        3294.961809  ...      619800.0            684.953341
1999        2091.696916        3634.380369  ...      617700.0            695.561610
2000        2135.377900        3803.459910  ...      577300.0            692.210553
2001        2159.032784        3781.395383  ...      576100.0            673.621830
2002        2305.789510        3926.050910  ...      586200.0            718.844399
2003        1984.082612        3990.892601  ...      590200.0            637.543801
2004        2001.508403        4061.683287  ...      599600.0            610.268629
2005        2122.595305        4105.253191  ...      607500.0            629.496520
2006        2201.011361        4167.210070  ...      581300.0            629.698079
2007        2234.076682        4232.064839  ...      557700.0            669.741545
2008        2347.738791        4185.093630  ...      605700.0            698.403919
2009        2225.723202        3841.231515  ...      568400.0            722.351746
2010        2067.417903        4098.272212  ...      550000.0            726.609281
2011        1946.689571        3859.170956  ...      550000.0            741.332808
2012        1968.750976        3831.001925  ...      550000.0            787.687127
2013        1985.923540        3943.253529  ...      550000.0            897.920641
2014        2039.604922        3987.444809  ...      550000.0            754.661588
2015        2033.716403        3955.701584  ...      550000.0            730.984303
2016        2100.489469        4047.274900  ...      550000.0            740.198903
2017        2136.286186        4158.061220  ...      550000.0            777.693237

[69 rows x 8 columns]
total_activty_df here:
       Oil Pipeline  Natural Gas Pipeline      Pipeline
Year                                                  
1949           NaN           57425.93309   57425.93309
1950      129000.0           65444.87939  194444.87939
1951      152000.0           75925.35464  227925.35464
1952      158000.0           82233.55629  240233.55629
1953      170000.0           87168.55522  257168.55522
1954      179000.0           93242.01875  272242.01875
1955      203000.0          101601.72830  304601.72830
1956      230000.0          110945.29400  340945.29400
1957      223000.0          118033.03560  341033.03560
1958      211000.0          122802.54040  333802.54040
1959      227000.0          135140.17660  362140.17660
1960      229000.0          144162.48740  373162.48740
1961      233000.0          150274.87030  383274.87030
1962      238000.0          159877.75050  397877.75050
1963      253000.0          168498.23230  421498.23230
1964      269000.0          180606.48990  449606.48990
1965      306000.0          189153.54840  495153.54840
1966      333000.0          206657.99190  539657.99190
1967      361000.0          217599.18200  578599.18200
1968      391000.0          233321.38750  624321.38750
1969      411000.0          251033.85460  662033.85460
1970      431000.0          264069.44300  695069.44300
1971      444000.0          272660.72490  716660.72490
1972      476000.0          276028.09080  752028.09080
1973      507000.0          275271.90530  782271.90530
1974      506000.0          264881.61250  770881.61250
1975      507000.0          243795.97560  750795.97560
1976      515000.0          246648.83650  761648.83650
1977      546000.0          240608.19690  786608.19690
1978      586000.0          242279.23070  828279.23070
...            ...                   ...           ...
1989      584000.0          241872.00050  825872.00050
1990      584000.0          239894.24920  823894.24920
1991      579000.0          247588.51100  826588.51100
1992      589000.0          256449.89590  845449.89590
1993      593000.0          263724.15330  856724.15330
1994      591000.0          269894.90840  860894.90840
1995      601000.0          281674.44100  882674.44100
1996      619200.0          286695.02640  905895.02640
1997      616500.0          288565.62790  905065.62790
1998      619800.0          283776.79530  903576.79530
1999      617700.0          287151.42310  904851.42310
2000      577300.0          299080.24610  876380.24610
2001      576100.0          284572.52510  860672.52510
2002      586200.0          294734.98060  880934.98060
2003      590200.0          285511.39420  875711.39420
2004      599600.0          287762.92800  887362.92800
2005      607500.0          282072.49330  889572.49330
2006      581300.0          277121.09630  858421.09630
2007      557700.0          295045.65520  852745.65520
2008      605700.0          297142.37230  902842.37230
2009      568400.0          291092.27710  859492.27710
2010      550000.0          307231.82100  857231.82100
2011      550000.0          311952.78420  861952.78420
2012      550000.0          325065.26720  875065.26720
2013      550000.0          331001.08970  881001.08970
2014      550000.0          338528.88550  888528.88550
2015      550000.0          346973.72330  896973.72330
2016      550000.0          350068.29260  900068.29260
2017      550000.0          344900.56890  894900.56890
2018      550000.0          382226.62350  932226.62350

[70 rows x 3 columns]
total_activty_df there:
       Oil Pipeline  Natural Gas Pipeline
Year                                    
1949           NaN           57425.93309
1950      129000.0           65444.87939
1951      152000.0           75925.35464
1952      158000.0           82233.55629
1953      170000.0           87168.55522
1954      179000.0           93242.01875
1955      203000.0          101601.72830
1956      230000.0          110945.29400
1957      223000.0          118033.03560
1958      211000.0          122802.54040
1959      227000.0          135140.17660
1960      229000.0          144162.48740
1961      233000.0          150274.87030
1962      238000.0          159877.75050
1963      253000.0          168498.23230
1964      269000.0          180606.48990
1965      306000.0          189153.54840
1966      333000.0          206657.99190
1967      361000.0          217599.18200
1968      391000.0          233321.38750
1969      411000.0          251033.85460
1970      431000.0          264069.44300
1971      444000.0          272660.72490
1972      476000.0          276028.09080
1973      507000.0          275271.90530
1974      506000.0          264881.61250
1975      507000.0          243795.97560
1976      515000.0          246648.83650
1977      546000.0          240608.19690
1978      586000.0          242279.23070
...            ...                   ...
1989      584000.0          241872.00050
1990      584000.0          239894.24920
1991      579000.0          247588.51100
1992      589000.0          256449.89590
1993      593000.0          263724.15330
1994      591000.0          269894.90840
1995      601000.0          281674.44100
1996      619200.0          286695.02640
1997      616500.0          288565.62790
1998      619800.0          283776.79530
1999      617700.0          287151.42310
2000      577300.0          299080.24610
2001      576100.0          284572.52510
2002      586200.0          294734.98060
2003      590200.0          285511.39420
2004      599600.0          287762.92800
2005      607500.0          282072.49330
2006      581300.0          277121.09630
2007      557700.0          295045.65520
2008      605700.0          297142.37230
2009      568400.0          291092.27710
2010      550000.0          307231.82100
2011      550000.0          311952.78420
2012      550000.0          325065.26720
2013      550000.0          331001.08970
2014      550000.0          338528.88550
2015      550000.0          346973.72330
2016      550000.0          350068.29260
2017      550000.0          344900.56890
2018      550000.0          382226.62350

[70 rows x 2 columns]
total_activty_df: 
       Oil Pipeline  Natural Gas Pipeline      Pipeline
Year                                                  
1949           NaN           57425.93309   57425.93309
1950      129000.0           65444.87939  194444.87939
1951      152000.0           75925.35464  227925.35464
1952      158000.0           82233.55629  240233.55629
1953      170000.0           87168.55522  257168.55522
1954      179000.0           93242.01875  272242.01875
1955      203000.0          101601.72830  304601.72830
1956      230000.0          110945.29400  340945.29400
1957      223000.0          118033.03560  341033.03560
1958      211000.0          122802.54040  333802.54040
1959      227000.0          135140.17660  362140.17660
1960      229000.0          144162.48740  373162.48740
1961      233000.0          150274.87030  383274.87030
1962      238000.0          159877.75050  397877.75050
1963      253000.0          168498.23230  421498.23230
1964      269000.0          180606.48990  449606.48990
1965      306000.0          189153.54840  495153.54840
1966      333000.0          206657.99190  539657.99190
1967      361000.0          217599.18200  578599.18200
1968      391000.0          233321.38750  624321.38750
1969      411000.0          251033.85460  662033.85460
1970      431000.0          264069.44300  695069.44300
1971      444000.0          272660.72490  716660.72490
1972      476000.0          276028.09080  752028.09080
1973      507000.0          275271.90530  782271.90530
1974      506000.0          264881.61250  770881.61250
1975      507000.0          243795.97560  750795.97560
1976      515000.0          246648.83650  761648.83650
1977      546000.0          240608.19690  786608.19690
1978      586000.0          242279.23070  828279.23070
...            ...                   ...           ...
1989      584000.0          241872.00050  825872.00050
1990      584000.0          239894.24920  823894.24920
1991      579000.0          247588.51100  826588.51100
1992      589000.0          256449.89590  845449.89590
1993      593000.0          263724.15330  856724.15330
1994      591000.0          269894.90840  860894.90840
1995      601000.0          281674.44100  882674.44100
1996      619200.0          286695.02640  905895.02640
1997      616500.0          288565.62790  905065.62790
1998      619800.0          283776.79530  903576.79530
1999      617700.0          287151.42310  904851.42310
2000      577300.0          299080.24610  876380.24610
2001      576100.0          284572.52510  860672.52510
2002      586200.0          294734.98060  880934.98060
2003      590200.0          285511.39420  875711.39420
2004      599600.0          287762.92800  887362.92800
2005      607500.0          282072.49330  889572.49330
2006      581300.0          277121.09630  858421.09630
2007      557700.0          295045.65520  852745.65520
2008      605700.0          297142.37230  902842.37230
2009      568400.0          291092.27710  859492.27710
2010      550000.0          307231.82100  857231.82100
2011      550000.0          311952.78420  861952.78420
2012      550000.0          325065.26720  875065.26720
2013      550000.0          331001.08970  881001.08970
2014      550000.0          338528.88550  888528.88550
2015      550000.0          346973.72330  896973.72330
2016      550000.0          350068.29260  900068.29260
2017      550000.0          344900.56890  894900.56890
2018      550000.0          382226.62350  932226.62350

[70 rows x 3 columns]
level1_name Pipeline
pnnl_data_raw['Nest level']: ['Buses' 'Cars and SWB Vehicles' 'Freight Total' 'Freight Trucks'
 'transportation' nan 'Light Trucks and LWB' 'Passenger Air'
 'Passenger Highway' 'Passenger-Rail' 'Passenger' 'Personal Vehicles'
 'Pipelines' 'Urban Rail']
energy_share columns (should just be pipeline): Index(['  Highway', 'Air', 'Pipeline', 'Rail', 'Total', 'Waterborne'], dtype='object', name='Category')
log_mean_divisia_weights energy shares: Category    Highway       Air  Pipeline      Rail  Waterborne
Year                                                         
1970       0.543271  0.041197  0.213561  0.144897    0.057075
1971       0.547938  0.046097  0.211611  0.140183    0.054171
1972       0.565031  0.043654  0.203677  0.136732    0.050906
1973       0.591264  0.043630  0.183703  0.135071    0.046332
1974       0.600527  0.043811  0.171320  0.137635    0.046707
1975       0.629994  0.043790  0.153610  0.126694    0.045912
1976       0.639934  0.048032  0.139103  0.127170    0.045761
1977       0.665141  0.042788  0.126877  0.122145    0.043049
1978       0.679913  0.037747  0.116264  0.111914    0.054162
1979       0.676153  0.034814  0.126781  0.110548    0.051704
1980       0.669837  0.034514  0.132732  0.106471    0.056446
1981       0.674291  0.036285  0.133038  0.100592    0.055794
1982       0.695646  0.034918  0.127562  0.087470    0.054404
1983       0.714715  0.036261  0.105658  0.087044    0.056322
1984       0.709187  0.039352  0.109487  0.090279    0.051695
1985       0.719669  0.037775  0.105612  0.084822    0.052122
1986       0.723722  0.044946  0.100466  0.081002    0.049864
1987       0.718356  0.049246  0.103770  0.079791    0.048838
1988       0.704638  0.052360  0.118037  0.078735    0.046230
1989       0.706745  0.056331  0.118518  0.077328    0.041078
1990       0.712124  0.055090  0.119641  0.073126    0.040019
1991       0.729651  0.050544  0.110122  0.068956    0.040728
1992       0.730539  0.053452  0.105889  0.070065    0.040055
1993       0.729840  0.055772  0.109026  0.069933    0.035428
1994       0.724699  0.058076  0.112404  0.070827    0.033993
1995       0.727321  0.059164  0.110397  0.071057    0.032060
1996       0.729124  0.059702  0.110029  0.071664    0.029480
1997       0.724319  0.064543  0.114172  0.070441    0.026524
1998       0.749883  0.063736  0.093929  0.068834    0.023619
1999       0.759826  0.055726  0.092298  0.069000    0.023150
2000       0.761062  0.061763  0.088707  0.066123    0.022345
2001       0.767569  0.058220  0.087039  0.066848    0.020323
2002       0.771206  0.056280  0.088959  0.064391    0.019164
2003       0.769511  0.060028  0.082109  0.068758    0.019594
2004       0.768076  0.063927  0.077308  0.071726    0.018964
2005       0.770059  0.063829  0.077836  0.070656    0.017620
2006       0.772960  0.063639  0.076431  0.070950    0.016020
2007       0.775233  0.061580  0.080296  0.067969    0.014922
2008       0.781776  0.054031  0.083577  0.064918    0.015697
2009       0.786074  0.048557  0.093593  0.057867    0.013909
2010       0.779806  0.052782  0.091898  0.061731    0.013783
2011       0.765071  0.055526  0.097690  0.067818    0.013895
2012       0.764298  0.052276  0.103802  0.066423    0.013201
2013       0.757664  0.047945  0.114741  0.065801    0.013848
2014       0.772215  0.048006  0.096691  0.069255    0.013833
2015       0.775768  0.048997  0.094679  0.066883    0.013673
2016       0.783371  0.048789  0.094319  0.060426    0.013095
2017       0.778744  0.051337  0.096217  0.060695    0.013007
log_mean_divisia_weights col:   Highway
energy shares with shift:
 Category    Highway       Air  Pipeline      Rail  Waterborne    Highway_shift
Year                                                                          
1970       0.543271  0.041197  0.213561  0.144897    0.057075         0.000000
1971       0.547938  0.046097  0.211611  0.140183    0.054171         0.543271
1972       0.565031  0.043654  0.203677  0.136732    0.050906         0.547938
1973       0.591264  0.043630  0.183703  0.135071    0.046332         0.565031
1974       0.600527  0.043811  0.171320  0.137635    0.046707         0.591264
1975       0.629994  0.043790  0.153610  0.126694    0.045912         0.600527
1976       0.639934  0.048032  0.139103  0.127170    0.045761         0.629994
1977       0.665141  0.042788  0.126877  0.122145    0.043049         0.639934
1978       0.679913  0.037747  0.116264  0.111914    0.054162         0.665141
1979       0.676153  0.034814  0.126781  0.110548    0.051704         0.679913
1980       0.669837  0.034514  0.132732  0.106471    0.056446         0.676153
1981       0.674291  0.036285  0.133038  0.100592    0.055794         0.669837
1982       0.695646  0.034918  0.127562  0.087470    0.054404         0.674291
1983       0.714715  0.036261  0.105658  0.087044    0.056322         0.695646
1984       0.709187  0.039352  0.109487  0.090279    0.051695         0.714715
1985       0.719669  0.037775  0.105612  0.084822    0.052122         0.709187
1986       0.723722  0.044946  0.100466  0.081002    0.049864         0.719669
1987       0.718356  0.049246  0.103770  0.079791    0.048838         0.723722
1988       0.704638  0.052360  0.118037  0.078735    0.046230         0.718356
1989       0.706745  0.056331  0.118518  0.077328    0.041078         0.704638
1990       0.712124  0.055090  0.119641  0.073126    0.040019         0.706745
1991       0.729651  0.050544  0.110122  0.068956    0.040728         0.712124
1992       0.730539  0.053452  0.105889  0.070065    0.040055         0.729651
1993       0.729840  0.055772  0.109026  0.069933    0.035428         0.730539
1994       0.724699  0.058076  0.112404  0.070827    0.033993         0.729840
1995       0.727321  0.059164  0.110397  0.071057    0.032060         0.724699
1996       0.729124  0.059702  0.110029  0.071664    0.029480         0.727321
1997       0.724319  0.064543  0.114172  0.070441    0.026524         0.729124
1998       0.749883  0.063736  0.093929  0.068834    0.023619         0.724319
1999       0.759826  0.055726  0.092298  0.069000    0.023150         0.749883
2000       0.761062  0.061763  0.088707  0.066123    0.022345         0.759826
2001       0.767569  0.058220  0.087039  0.066848    0.020323         0.761062
2002       0.771206  0.056280  0.088959  0.064391    0.019164         0.767569
2003       0.769511  0.060028  0.082109  0.068758    0.019594         0.771206
2004       0.768076  0.063927  0.077308  0.071726    0.018964         0.769511
2005       0.770059  0.063829  0.077836  0.070656    0.017620         0.768076
2006       0.772960  0.063639  0.076431  0.070950    0.016020         0.770059
2007       0.775233  0.061580  0.080296  0.067969    0.014922         0.772960
2008       0.781776  0.054031  0.083577  0.064918    0.015697         0.775233
2009       0.786074  0.048557  0.093593  0.057867    0.013909         0.781776
2010       0.779806  0.052782  0.091898  0.061731    0.013783         0.786074
2011       0.765071  0.055526  0.097690  0.067818    0.013895         0.779806
2012       0.764298  0.052276  0.103802  0.066423    0.013201         0.765071
2013       0.757664  0.047945  0.114741  0.065801    0.013848         0.764298
2014       0.772215  0.048006  0.096691  0.069255    0.013833         0.757664
2015       0.775768  0.048997  0.094679  0.066883    0.013673         0.772215
2016       0.783371  0.048789  0.094319  0.060426    0.013095         0.775768
2017       0.778744  0.051337  0.096217  0.060695    0.013007         0.783371
log_mean_divisia_weights col: Air
energy shares with shift:
 Category    Highway       Air  Pipeline  ...  Waterborne    Highway_shift  Air_shift
Year                                     ...                                        
1970       0.543271  0.041197  0.213561  ...    0.057075         0.000000   0.000000
1971       0.547938  0.046097  0.211611  ...    0.054171         0.543271   0.041197
1972       0.565031  0.043654  0.203677  ...    0.050906         0.547938   0.046097
1973       0.591264  0.043630  0.183703  ...    0.046332         0.565031   0.043654
1974       0.600527  0.043811  0.171320  ...    0.046707         0.591264   0.043630
1975       0.629994  0.043790  0.153610  ...    0.045912         0.600527   0.043811
1976       0.639934  0.048032  0.139103  ...    0.045761         0.629994   0.043790
1977       0.665141  0.042788  0.126877  ...    0.043049         0.639934   0.048032
1978       0.679913  0.037747  0.116264  ...    0.054162         0.665141   0.042788
1979       0.676153  0.034814  0.126781  ...    0.051704         0.679913   0.037747
1980       0.669837  0.034514  0.132732  ...    0.056446         0.676153   0.034814
1981       0.674291  0.036285  0.133038  ...    0.055794         0.669837   0.034514
1982       0.695646  0.034918  0.127562  ...    0.054404         0.674291   0.036285
1983       0.714715  0.036261  0.105658  ...    0.056322         0.695646   0.034918
1984       0.709187  0.039352  0.109487  ...    0.051695         0.714715   0.036261
1985       0.719669  0.037775  0.105612  ...    0.052122         0.709187   0.039352
1986       0.723722  0.044946  0.100466  ...    0.049864         0.719669   0.037775
1987       0.718356  0.049246  0.103770  ...    0.048838         0.723722   0.044946
1988       0.704638  0.052360  0.118037  ...    0.046230         0.718356   0.049246
1989       0.706745  0.056331  0.118518  ...    0.041078         0.704638   0.052360
1990       0.712124  0.055090  0.119641  ...    0.040019         0.706745   0.056331
1991       0.729651  0.050544  0.110122  ...    0.040728         0.712124   0.055090
1992       0.730539  0.053452  0.105889  ...    0.040055         0.729651   0.050544
1993       0.729840  0.055772  0.109026  ...    0.035428         0.730539   0.053452
1994       0.724699  0.058076  0.112404  ...    0.033993         0.729840   0.055772
1995       0.727321  0.059164  0.110397  ...    0.032060         0.724699   0.058076
1996       0.729124  0.059702  0.110029  ...    0.029480         0.727321   0.059164
1997       0.724319  0.064543  0.114172  ...    0.026524         0.729124   0.059702
1998       0.749883  0.063736  0.093929  ...    0.023619         0.724319   0.064543
1999       0.759826  0.055726  0.092298  ...    0.023150         0.749883   0.063736
2000       0.761062  0.061763  0.088707  ...    0.022345         0.759826   0.055726
2001       0.767569  0.058220  0.087039  ...    0.020323         0.761062   0.061763
2002       0.771206  0.056280  0.088959  ...    0.019164         0.767569   0.058220
2003       0.769511  0.060028  0.082109  ...    0.019594         0.771206   0.056280
2004       0.768076  0.063927  0.077308  ...    0.018964         0.769511   0.060028
2005       0.770059  0.063829  0.077836  ...    0.017620         0.768076   0.063927
2006       0.772960  0.063639  0.076431  ...    0.016020         0.770059   0.063829
2007       0.775233  0.061580  0.080296  ...    0.014922         0.772960   0.063639
2008       0.781776  0.054031  0.083577  ...    0.015697         0.775233   0.061580
2009       0.786074  0.048557  0.093593  ...    0.013909         0.781776   0.054031
2010       0.779806  0.052782  0.091898  ...    0.013783         0.786074   0.048557
2011       0.765071  0.055526  0.097690  ...    0.013895         0.779806   0.052782
2012       0.764298  0.052276  0.103802  ...    0.013201         0.765071   0.055526
2013       0.757664  0.047945  0.114741  ...    0.013848         0.764298   0.052276
2014       0.772215  0.048006  0.096691  ...    0.013833         0.757664   0.047945
2015       0.775768  0.048997  0.094679  ...    0.013673         0.772215   0.048006
2016       0.783371  0.048789  0.094319  ...    0.013095         0.775768   0.048997
2017       0.778744  0.051337  0.096217  ...    0.013007         0.783371   0.048789

[48 rows x 7 columns]
log_mean_divisia_weights col: Pipeline
energy shares with shift:
 Category    Highway       Air  ...  Air_shift  Pipeline_shift
Year                           ...                           
1970       0.543271  0.041197  ...   0.000000        0.000000
1971       0.547938  0.046097  ...   0.041197        0.213561
1972       0.565031  0.043654  ...   0.046097        0.211611
1973       0.591264  0.043630  ...   0.043654        0.203677
1974       0.600527  0.043811  ...   0.043630        0.183703
1975       0.629994  0.043790  ...   0.043811        0.171320
1976       0.639934  0.048032  ...   0.043790        0.153610
1977       0.665141  0.042788  ...   0.048032        0.139103
1978       0.679913  0.037747  ...   0.042788        0.126877
1979       0.676153  0.034814  ...   0.037747        0.116264
1980       0.669837  0.034514  ...   0.034814        0.126781
1981       0.674291  0.036285  ...   0.034514        0.132732
1982       0.695646  0.034918  ...   0.036285        0.133038
1983       0.714715  0.036261  ...   0.034918        0.127562
1984       0.709187  0.039352  ...   0.036261        0.105658
1985       0.719669  0.037775  ...   0.039352        0.109487
1986       0.723722  0.044946  ...   0.037775        0.105612
1987       0.718356  0.049246  ...   0.044946        0.100466
1988       0.704638  0.052360  ...   0.049246        0.103770
1989       0.706745  0.056331  ...   0.052360        0.118037
1990       0.712124  0.055090  ...   0.056331        0.118518
1991       0.729651  0.050544  ...   0.055090        0.119641
1992       0.730539  0.053452  ...   0.050544        0.110122
1993       0.729840  0.055772  ...   0.053452        0.105889
1994       0.724699  0.058076  ...   0.055772        0.109026
1995       0.727321  0.059164  ...   0.058076        0.112404
1996       0.729124  0.059702  ...   0.059164        0.110397
1997       0.724319  0.064543  ...   0.059702        0.110029
1998       0.749883  0.063736  ...   0.064543        0.114172
1999       0.759826  0.055726  ...   0.063736        0.093929
2000       0.761062  0.061763  ...   0.055726        0.092298
2001       0.767569  0.058220  ...   0.061763        0.088707
2002       0.771206  0.056280  ...   0.058220        0.087039
2003       0.769511  0.060028  ...   0.056280        0.088959
2004       0.768076  0.063927  ...   0.060028        0.082109
2005       0.770059  0.063829  ...   0.063927        0.077308
2006       0.772960  0.063639  ...   0.063829        0.077836
2007       0.775233  0.061580  ...   0.063639        0.076431
2008       0.781776  0.054031  ...   0.061580        0.080296
2009       0.786074  0.048557  ...   0.054031        0.083577
2010       0.779806  0.052782  ...   0.048557        0.093593
2011       0.765071  0.055526  ...   0.052782        0.091898
2012       0.764298  0.052276  ...   0.055526        0.097690
2013       0.757664  0.047945  ...   0.052276        0.103802
2014       0.772215  0.048006  ...   0.047945        0.114741
2015       0.775768  0.048997  ...   0.048006        0.096691
2016       0.783371  0.048789  ...   0.048997        0.094679
2017       0.778744  0.051337  ...   0.048789        0.094319

[48 rows x 8 columns]
log_mean_divisia_weights col: Rail
energy shares with shift:
 Category    Highway       Air  Pipeline  ...  Air_shift  Pipeline_shift  Rail_shift
Year                                     ...                                       
1970       0.543271  0.041197  0.213561  ...   0.000000        0.000000    0.000000
1971       0.547938  0.046097  0.211611  ...   0.041197        0.213561    0.144897
1972       0.565031  0.043654  0.203677  ...   0.046097        0.211611    0.140183
1973       0.591264  0.043630  0.183703  ...   0.043654        0.203677    0.136732
1974       0.600527  0.043811  0.171320  ...   0.043630        0.183703    0.135071
1975       0.629994  0.043790  0.153610  ...   0.043811        0.171320    0.137635
1976       0.639934  0.048032  0.139103  ...   0.043790        0.153610    0.126694
1977       0.665141  0.042788  0.126877  ...   0.048032        0.139103    0.127170
1978       0.679913  0.037747  0.116264  ...   0.042788        0.126877    0.122145
1979       0.676153  0.034814  0.126781  ...   0.037747        0.116264    0.111914
1980       0.669837  0.034514  0.132732  ...   0.034814        0.126781    0.110548
1981       0.674291  0.036285  0.133038  ...   0.034514        0.132732    0.106471
1982       0.695646  0.034918  0.127562  ...   0.036285        0.133038    0.100592
1983       0.714715  0.036261  0.105658  ...   0.034918        0.127562    0.087470
1984       0.709187  0.039352  0.109487  ...   0.036261        0.105658    0.087044
1985       0.719669  0.037775  0.105612  ...   0.039352        0.109487    0.090279
1986       0.723722  0.044946  0.100466  ...   0.037775        0.105612    0.084822
1987       0.718356  0.049246  0.103770  ...   0.044946        0.100466    0.081002
1988       0.704638  0.052360  0.118037  ...   0.049246        0.103770    0.079791
1989       0.706745  0.056331  0.118518  ...   0.052360        0.118037    0.078735
1990       0.712124  0.055090  0.119641  ...   0.056331        0.118518    0.077328
1991       0.729651  0.050544  0.110122  ...   0.055090        0.119641    0.073126
1992       0.730539  0.053452  0.105889  ...   0.050544        0.110122    0.068956
1993       0.729840  0.055772  0.109026  ...   0.053452        0.105889    0.070065
1994       0.724699  0.058076  0.112404  ...   0.055772        0.109026    0.069933
1995       0.727321  0.059164  0.110397  ...   0.058076        0.112404    0.070827
1996       0.729124  0.059702  0.110029  ...   0.059164        0.110397    0.071057
1997       0.724319  0.064543  0.114172  ...   0.059702        0.110029    0.071664
1998       0.749883  0.063736  0.093929  ...   0.064543        0.114172    0.070441
1999       0.759826  0.055726  0.092298  ...   0.063736        0.093929    0.068834
2000       0.761062  0.061763  0.088707  ...   0.055726        0.092298    0.069000
2001       0.767569  0.058220  0.087039  ...   0.061763        0.088707    0.066123
2002       0.771206  0.056280  0.088959  ...   0.058220        0.087039    0.066848
2003       0.769511  0.060028  0.082109  ...   0.056280        0.088959    0.064391
2004       0.768076  0.063927  0.077308  ...   0.060028        0.082109    0.068758
2005       0.770059  0.063829  0.077836  ...   0.063927        0.077308    0.071726
2006       0.772960  0.063639  0.076431  ...   0.063829        0.077836    0.070656
2007       0.775233  0.061580  0.080296  ...   0.063639        0.076431    0.070950
2008       0.781776  0.054031  0.083577  ...   0.061580        0.080296    0.067969
2009       0.786074  0.048557  0.093593  ...   0.054031        0.083577    0.064918
2010       0.779806  0.052782  0.091898  ...   0.048557        0.093593    0.057867
2011       0.765071  0.055526  0.097690  ...   0.052782        0.091898    0.061731
2012       0.764298  0.052276  0.103802  ...   0.055526        0.097690    0.067818
2013       0.757664  0.047945  0.114741  ...   0.052276        0.103802    0.066423
2014       0.772215  0.048006  0.096691  ...   0.047945        0.114741    0.065801
2015       0.775768  0.048997  0.094679  ...   0.048006        0.096691    0.069255
2016       0.783371  0.048789  0.094319  ...   0.048997        0.094679    0.066883
2017       0.778744  0.051337  0.096217  ...   0.048789        0.094319    0.060426

[48 rows x 9 columns]
log_mean_divisia_weights col: Waterborne
energy shares with shift:
 Category    Highway       Air  ...  Rail_shift  Waterborne_shift
Year                           ...                              
1970       0.543271  0.041197  ...    0.000000          0.000000
1971       0.547938  0.046097  ...    0.144897          0.057075
1972       0.565031  0.043654  ...    0.140183          0.054171
1973       0.591264  0.043630  ...    0.136732          0.050906
1974       0.600527  0.043811  ...    0.135071          0.046332
1975       0.629994  0.043790  ...    0.137635          0.046707
1976       0.639934  0.048032  ...    0.126694          0.045912
1977       0.665141  0.042788  ...    0.127170          0.045761
1978       0.679913  0.037747  ...    0.122145          0.043049
1979       0.676153  0.034814  ...    0.111914          0.054162
1980       0.669837  0.034514  ...    0.110548          0.051704
1981       0.674291  0.036285  ...    0.106471          0.056446
1982       0.695646  0.034918  ...    0.100592          0.055794
1983       0.714715  0.036261  ...    0.087470          0.054404
1984       0.709187  0.039352  ...    0.087044          0.056322
1985       0.719669  0.037775  ...    0.090279          0.051695
1986       0.723722  0.044946  ...    0.084822          0.052122
1987       0.718356  0.049246  ...    0.081002          0.049864
1988       0.704638  0.052360  ...    0.079791          0.048838
1989       0.706745  0.056331  ...    0.078735          0.046230
1990       0.712124  0.055090  ...    0.077328          0.041078
1991       0.729651  0.050544  ...    0.073126          0.040019
1992       0.730539  0.053452  ...    0.068956          0.040728
1993       0.729840  0.055772  ...    0.070065          0.040055
1994       0.724699  0.058076  ...    0.069933          0.035428
1995       0.727321  0.059164  ...    0.070827          0.033993
1996       0.729124  0.059702  ...    0.071057          0.032060
1997       0.724319  0.064543  ...    0.071664          0.029480
1998       0.749883  0.063736  ...    0.070441          0.026524
1999       0.759826  0.055726  ...    0.068834          0.023619
2000       0.761062  0.061763  ...    0.069000          0.023150
2001       0.767569  0.058220  ...    0.066123          0.022345
2002       0.771206  0.056280  ...    0.066848          0.020323
2003       0.769511  0.060028  ...    0.064391          0.019164
2004       0.768076  0.063927  ...    0.068758          0.019594
2005       0.770059  0.063829  ...    0.071726          0.018964
2006       0.772960  0.063639  ...    0.070656          0.017620
2007       0.775233  0.061580  ...    0.070950          0.016020
2008       0.781776  0.054031  ...    0.067969          0.014922
2009       0.786074  0.048557  ...    0.064918          0.015697
2010       0.779806  0.052782  ...    0.057867          0.013909
2011       0.765071  0.055526  ...    0.061731          0.013783
2012       0.764298  0.052276  ...    0.067818          0.013895
2013       0.757664  0.047945  ...    0.066423          0.013201
2014       0.772215  0.048006  ...    0.065801          0.013848
2015       0.775768  0.048997  ...    0.069255          0.013833
2016       0.783371  0.048789  ...    0.066883          0.013673
2017       0.778744  0.051337  ...    0.060426          0.013095

[48 rows x 10 columns]
log mean weights: 
       log_mean_weights_  Highway  ...  log_mean_weights_Waterborne
Year                              ...                             
1970                         NaN  ...                          NaN
1971                    0.545601  ...                     0.055610
1972                    0.556441  ...                     0.052522
1973                    0.578048  ...                     0.048583
1974                    0.595884  ...                     0.046519
1975                    0.615143  ...                     0.046308
1976                    0.634951  ...                     0.045837
1977                    0.652456  ...                     0.044391
1978                    0.672500  ...                     0.048393
1979                    0.678031  ...                     0.052923
1980                    0.672990  ...                     0.054040
1981                    0.672062  ...                     0.056119
1982                    0.684913  ...                     0.055096
1983                    0.705138  ...                     0.055358
1984                    0.711947  ...                     0.053975
1985                    0.714415  ...                     0.051908
1986                    0.721694  ...                     0.050985
1987                    0.721036  ...                     0.049349
1988                    0.711475  ...                     0.047522
1989                    0.705691  ...                     0.043603
1990                    0.709431  ...                     0.040546
1991                    0.720852  ...                     0.040372
1992                    0.730095  ...                     0.040390
1993                    0.730190  ...                     0.037694
1994                    0.727267  ...                     0.034706
1995                    0.726009  ...                     0.033017
1996                    0.728222  ...                     0.030752
1997                    0.726719  ...                     0.027976
1998                    0.737027  ...                     0.025043
1999                    0.754843  ...                     0.023384
2000                    0.760444  ...                     0.022745
2001                    0.764311  ...                     0.021318
2002                    0.769387  ...                     0.019738
2003                    0.770358  ...                     0.019378
2004                    0.768793  ...                     0.019277
2005                    0.769067  ...                     0.018284
2006                    0.771509  ...                     0.016807
2007                    0.774096  ...                     0.015464
2008                    0.778500  ...                     0.015306
2009                    0.783923  ...                     0.014785
2010                    0.782935  ...                     0.013846
2011                    0.772415  ...                     0.013839
2012                    0.764685  ...                     0.013545
2013                    0.760976  ...                     0.013522
2014                    0.764916  ...                     0.013840
2015                    0.773990  ...                     0.013753
2016                    0.779563  ...                     0.013382
2017                    0.781055  ...                     0.013051

[48 rows x 5 columns]
sum_log_mean_shares:
 Year
1970    0.000000
1971    0.999924
1972    0.999896
1973    0.999691
1974    0.999912
1975    0.999645
1976    0.999834
1977    0.999744
1978    0.999556
1979    0.999892
1980    0.999925
1981    0.999962
1982    0.999765
1983    0.999603
1984    0.999921
1985    0.999942
1986    0.999850
1987    0.999952
1988    0.999796
1989    0.999922
1990    0.999972
1991    0.999845
1992    0.999970
1993    0.999937
1994    0.999975
1995    0.999985
1996    0.999981
1997    0.999925
1998    0.999565
1999    0.999896
2000    0.999924
2001    0.999959
2002    0.999976
2003    0.999909
2004    0.999943
2005    0.999990
2006    0.999984
2007    0.999961
2008    0.999887
2009    0.999769
2010    0.999943
2011    0.999888
2012    0.999947
2013    0.999870
2014    0.999705
2015    0.999986
2016    0.999937
2017    0.999984
dtype: float64
eii_output log mean divisia weights: 
       log_mean_weights_  Highway  ...  log_mean_weights_Waterborne
Year                              ...                             
1970                         NaN  ...                          NaN
1971                    0.545642  ...                     0.055615
1972                    0.556499  ...                     0.052527
1973                    0.578227  ...                     0.048598
1974                    0.595936  ...                     0.046523

[5 rows x 5 columns]
pnnl_data:
               Sector      Nest level  ...        Category        Value
0     transportation     All_Freight  ...         Highway  0.543270558
1     transportation     All_Freight  ...         Highway   0.54793762
2     transportation     All_Freight  ...         Highway  0.565030932
3     transportation     All_Freight  ...         Highway  0.591264238
4     transportation     All_Freight  ...         Highway  0.600527105
5     transportation     All_Freight  ...         Highway  0.629994055
6     transportation     All_Freight  ...         Highway  0.639933675
7     transportation     All_Freight  ...         Highway  0.665140901
8     transportation     All_Freight  ...         Highway   0.67991297
9     transportation     All_Freight  ...         Highway  0.676153012
10    transportation     All_Freight  ...         Highway  0.669837092
11    transportation     All_Freight  ...         Highway  0.674290988
12    transportation     All_Freight  ...         Highway  0.695646473
13    transportation     All_Freight  ...         Highway  0.714715231
14    transportation     All_Freight  ...         Highway   0.70918688
15    transportation     All_Freight  ...         Highway  0.719668833
16    transportation     All_Freight  ...         Highway  0.723722298
17    transportation     All_Freight  ...         Highway  0.718355698
18    transportation     All_Freight  ...         Highway  0.704638177
19    transportation     All_Freight  ...         Highway  0.706745035
20    transportation     All_Freight  ...         Highway   0.71212381
21    transportation     All_Freight  ...         Highway  0.729650802
22    transportation     All_Freight  ...         Highway  0.730539177
23    transportation     All_Freight  ...         Highway  0.729840427
24    transportation     All_Freight  ...         Highway  0.724699405
25    transportation     All_Freight  ...         Highway  0.727320974
26    transportation     All_Freight  ...         Highway  0.729124422
27    transportation     All_Freight  ...         Highway  0.724319421
28    transportation     All_Freight  ...         Highway  0.749882644
29    transportation     All_Freight  ...         Highway  0.759825668
...              ...             ...  ...             ...          ...
3858  transportation  transportation  ...  Transportation          NaN
3859  transportation  transportation  ...  Transportation          NaN
3860  transportation  transportation  ...  Transportation          NaN
3861  transportation  transportation  ...  Transportation          NaN
3862  transportation  transportation  ...  Transportation          NaN
3863  transportation  transportation  ...  Transportation          NaN
3864  transportation  transportation  ...  Transportation          NaN
3865  transportation  transportation  ...  Transportation          NaN
3866  transportation  transportation  ...  Transportation          NaN
3867  transportation  transportation  ...  Transportation          NaN
3868  transportation  transportation  ...  Transportation          NaN
3869  transportation  transportation  ...  Transportation          NaN
3870  transportation  transportation  ...  Transportation          NaN
3871  transportation  transportation  ...  Transportation          NaN
3872  transportation  transportation  ...  Transportation          NaN
3873  transportation  transportation  ...  Transportation          NaN
3874  transportation  transportation  ...  Transportation          NaN
3875  transportation  transportation  ...  Transportation          NaN
3876  transportation  transportation  ...  Transportation          NaN
3877  transportation  transportation  ...  Transportation          NaN
3878  transportation  transportation  ...  Transportation          NaN
3879  transportation  transportation  ...  Transportation          NaN
3880  transportation  transportation  ...  Transportation          NaN
3881  transportation  transportation  ...  Transportation          NaN
3882  transportation  transportation  ...  Transportation          NaN
3883  transportation  transportation  ...  Transportation          NaN
3884  transportation  transportation  ...  Transportation          NaN
3885  transportation  transportation  ...  Transportation          NaN
3886  transportation  transportation  ...  Transportation          NaN
3887  transportation  transportation  ...  Transportation          NaN

[3888 rows x 7 columns]
pnnl_weights:
       Year   Category        Value
96    1970    Highway          NaN
97    1971    Highway  0.545642404
98    1972    Highway  0.556498501
99    1973    Highway  0.578226793
100   1974    Highway  0.595936315
101   1975    Highway  0.615361582
102   1976    Highway  0.635056143
103   1977    Highway  0.652623253
104   1978    Highway  0.672798589
105   1979    Highway  0.678104704
106   1980    Highway  0.673040821
107   1981    Highway  0.672087357
108   1982    Highway  0.685074077
109   1983    Highway  0.705417634
110   1984    Highway   0.71200366
111   1985    Highway  0.714456816
112   1986    Highway  0.721802039
113   1987    Highway  0.721070479
114   1988    Highway  0.711620192
115   1989    Highway   0.70574592
116   1990    Highway  0.709451212
117   1991    Highway  0.720963792
118   1992    Highway  0.730116715
119   1993    Highway   0.73023592
120   1994    Highway  0.727285274
121   1995    Highway  0.726020273
122   1996    Highway  0.728236415
123   1997    Highway  0.726773517
124   1998    Highway  0.737347846
125   1999    Highway  0.754921536
...    ...        ...          ...
1794  1988       Rail  0.079277548
1795  1989       Rail  0.078035196
1796  1990       Rail  0.075209653
1797  1991       Rail   0.07103153
1798  1992       Rail  0.069510747
1799  1993       Rail  0.070003497
1800  1994       Rail  0.070381179
1801  1995       Rail  0.070943231
1802  1996       Rail  0.071361697
1803  1997       Rail  0.071056403
1804  1998       Rail  0.069664944
1805  1999       Rail  0.068924078
1806  2000       Rail  0.067556211
1807  2001       Rail  0.066487145
1808  2002       Rail  0.065613071
1809  2003       Rail  0.066556778
1810  2004       Rail    0.0702355
1811  2005       Rail   0.07119017
1812  2006       Rail   0.07080393
1813  2007       Rail  0.069451437
1814  2008       Rail   0.06643948
1815  2009       Rail  0.061339409
1816  2010       Rail  0.059781698
1817  2011       Rail  0.064733847
1818  2012       Rail  0.067121354
1819  2013       Rail  0.066120245
1820  2014       Rail  0.067533525
1821  2015       Rail  0.068063249
1822  2016       Rail  0.063604094
1823  2017       Rail  0.060561691

[288 rows x 3 columns]
pnnl_weights_:
           Highway          Air     Pipeline         Rail Total   Waterborne
Year                                                                       
1970          NaN          NaN          NaN          NaN   NaN          NaN
1971  0.545642404   0.04360446  0.212600641  0.142537983   NaN  0.055614512
1972  0.556498501  0.044868856  0.207640099  0.138465233   NaN  0.052527312
1973  0.578226793  0.043655105  0.193577595  0.135942197   NaN   0.04859831
1974  0.595936315  0.043724376  0.177454969   0.13636102   NaN   0.04652332
1975  0.615361582  0.043816474  0.162361406  0.132135675   NaN  0.046324862
1976  0.635056143  0.045886032  0.146260815  0.126952802   NaN  0.045844209
1977  0.652623253  0.045371068  0.132930334  0.124672476   NaN   0.04440287
1978  0.672798589  0.040232721  0.121546858  0.117007098   NaN  0.048414733
1979  0.678104704  0.036264581  0.121459796  0.111241818   NaN  0.052929101
1980  0.673040821  0.034666327  0.129743628  0.108504768   NaN  0.054044457
1981  0.672087357   0.03539331  0.132889883  0.103507816   NaN  0.056121635
1982  0.685074077  0.035605211  0.130311224  0.093900521   NaN  0.055108967
1983  0.705417634  0.035599041  0.116312269  0.087291566   NaN  0.055379489
1984   0.71200366  0.037788218  0.107569487  0.088658945   NaN  0.053979691
1985  0.714456816  0.038560409  0.107544128  0.087527554   NaN  0.051911092
1986  0.721802039   0.04126284  0.103033031  0.082909839   NaN   0.05099225
1987  0.721070479  0.047065524  0.102113935  0.080398608   NaN  0.049351454
1988  0.711620192  0.050797562  0.110773204  0.079277548   NaN  0.047531494
1989   0.70574592  0.054325869  0.118286505  0.078035196   NaN  0.043606509
1990  0.709451212  0.055710025  0.119082007  0.075209653   NaN  0.040547104
1991  0.720963792   0.05279247  0.114833873   0.07103153   NaN  0.040378334
1992  0.730116715  0.051985836  0.107995186  0.069510747   NaN  0.040391515
1993   0.73023592  0.054607236  0.107456762  0.070003497   NaN  0.037696585
1994  0.727285274  0.056917674  0.110709236  0.070381179   NaN  0.034706638
1995  0.726020273  0.058619159  0.111399494  0.070943231   NaN  0.033017843
1996  0.728236415  0.059433905  0.110215077  0.071361697   NaN  0.030752907
1997  0.726773517  0.062095728  0.112096068  0.071056403   NaN  0.027978283
1998  0.737347846  0.064166229  0.103766634  0.069664944   NaN  0.025054347
1999  0.754921536  0.059647573  0.093120701  0.068924078   NaN  0.023386111
2000  0.760501982  0.058697504  0.090497457  0.067556211   NaN  0.022746846
2001   0.76434295  0.059976787  0.087874132  0.066487145   NaN  0.021318987
2002  0.769404771  0.057246079   0.08799775  0.065613071   NaN  0.019738328
2003  0.770428384  0.058139011  0.085495768  0.066556778   NaN  0.019380059
2004  0.768837061  0.061960197  0.079688703    0.0702355   NaN  0.019278539
2005  0.769075179  0.063878564  0.077572365   0.07119017   NaN  0.018283723
2006  0.771520965  0.063735233  0.077132646   0.07080393   NaN  0.016807225
2007   0.77412631  0.062606628  0.078350871  0.069451437   NaN  0.015464755
2008  0.778587926  0.057729922  0.081934914   0.06643948   NaN  0.015307758
2009   0.78410402  0.051257154  0.088510842  0.061339409   NaN  0.014788574
2010   0.78298012  0.050643304  0.092747931  0.059781698   NaN  0.013846946
2011   0.77250164  0.054148846  0.094774904  0.064733847   NaN  0.013840763
2012  0.764724843  0.053887512  0.100720361  0.067121354   NaN  0.013545929
2013  0.761075501  0.050085937  0.109194786  0.066120245   NaN  0.013523531
2014  0.765142304  0.047989999  0.105489971  0.067533525   NaN  0.013844201
2015    0.7740006  0.048500367  0.095682908  0.068063249   NaN  0.013752876
2016  0.779612311  0.048895661   0.09450495  0.063604094   NaN  0.013382983
2017  0.781067717  0.050052674  0.095266378  0.060561691   NaN   0.01305154
pnnl_weights_:
      log_mean_weights_  Highway  ... log_mean_weights_Waterborne
Year                             ...                            
1970                        NaN  ...                         NaN
1971                0.545642404  ...                 0.055614512
1972                0.556498501  ...                 0.052527312
1973                0.578226793  ...                  0.04859831
1974                0.595936315  ...                  0.04652332
1975                0.615361582  ...                 0.046324862
1976                0.635056143  ...                 0.045844209
1977                0.652623253  ...                  0.04440287
1978                0.672798589  ...                 0.048414733
1979                0.678104704  ...                 0.052929101
1980                0.673040821  ...                 0.054044457
1981                0.672087357  ...                 0.056121635
1982                0.685074077  ...                 0.055108967
1983                0.705417634  ...                 0.055379489
1984                 0.71200366  ...                 0.053979691
1985                0.714456816  ...                 0.051911092
1986                0.721802039  ...                  0.05099225
1987                0.721070479  ...                 0.049351454
1988                0.711620192  ...                 0.047531494
1989                 0.70574592  ...                 0.043606509
1990                0.709451212  ...                 0.040547104
1991                0.720963792  ...                 0.040378334
1992                0.730116715  ...                 0.040391515
1993                 0.73023592  ...                 0.037696585
1994                0.727285274  ...                 0.034706638
1995                0.726020273  ...                 0.033017843
1996                0.728236415  ...                 0.030752907
1997                0.726773517  ...                 0.027978283
1998                0.737347846  ...                 0.025054347
1999                0.754921536  ...                 0.023386111
2000                0.760501982  ...                 0.022746846
2001                 0.76434295  ...                 0.021318987
2002                0.769404771  ...                 0.019738328
2003                0.770428384  ...                 0.019380059
2004                0.768837061  ...                 0.019278539
2005                0.769075179  ...                 0.018283723
2006                0.771520965  ...                 0.016807225
2007                 0.77412631  ...                 0.015464755
2008                0.778587926  ...                 0.015307758
2009                 0.78410402  ...                 0.014788574
2010                 0.78298012  ...                 0.013846946
2011                 0.77250164  ...                 0.013840763
2012                0.764724843  ...                 0.013545929
2013                0.761075501  ...                 0.013523531
2014                0.765142304  ...                 0.013844201
2015                  0.7740006  ...                 0.013752876
2016                0.779612311  ...                 0.013382983
2017                0.781067717  ...                  0.01305154

[48 rows x 5 columns]
___________________ TestLMDI.test_calc_asi[transportation] ____________________

x = array([[nan, nan, '0.608850775', '0.391149225', 0.999999999, 5.91895e-10,
        nan, nan, nan],
       ['0.545642404...35094',
        0.999999999, 7.249839999999999e-10, '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
y = array([['0.145576231', '-0.238653861', '0.096806155', '0.161959122',
        5.08293e-09, -0.003109421, '-0.046181859'...  -2.3540400000000003e-08, 0.014872063999999999, '-0.055502716',
        '0.020518952', '-0.017878895']], dtype=object)

    def na_op(x, y):
        import pandas.core.computation.expressions as expressions
    
        try:
>           result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:2001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

op = <built-in function mul>, op_str = '*'
a = array([[nan, nan, '0.608850775', '0.391149225', 0.999999999, 5.91895e-10,
        nan, nan, nan],
       ['0.545642404...35094',
        0.999999999, 7.249839999999999e-10, '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
b = array([['0.145576231', '-0.238653861', '0.096806155', '0.161959122',
        5.08293e-09, -0.003109421, '-0.046181859'...  -2.3540400000000003e-08, 0.014872063999999999, '-0.055502716',
        '0.020518952', '-0.017878895']], dtype=object)
use_numexpr = True, eval_kwargs = {}

    def evaluate(op, op_str, a, b, use_numexpr=True,
                 **eval_kwargs):
        """ evaluate and return the expression of the op on a and b
    
            Parameters
            ----------
    
            op :    the actual operand
            op_str: the string version of the op
            a :     left operand
            b :     right operand
            use_numexpr : whether to try to use numexpr (default True)
            """
    
        use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)
        if use_numexpr:
>           return _evaluate(op, op_str, a, b, **eval_kwargs)

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\computation\expressions.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

op = <built-in function mul>, op_str = '*'
a = array([[nan, nan, '0.608850775', '0.391149225', 0.999999999, 5.91895e-10,
        nan, nan, nan],
       ['0.545642404...35094',
        0.999999999, 7.249839999999999e-10, '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
b = array([['0.145576231', '-0.238653861', '0.096806155', '0.161959122',
        5.08293e-09, -0.003109421, '-0.046181859'...  -2.3540400000000003e-08, 0.014872063999999999, '-0.055502716',
        '0.020518952', '-0.017878895']], dtype=object)
eval_kwargs = {}

    def _evaluate_standard(op, op_str, a, b, **eval_kwargs):
        """ standard evaluation """
        if _TEST_MODE:
            _store_test_result(False)
        with np.errstate(all='ignore'):
>           return op(a, b)
E           TypeError: can't multiply sequence by non-int of type 'float'

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\computation\expressions.py:68: TypeError

During handling of the above exception, another exception occurred:

self = <lmdi_test.TestLMDI object at 0x0000024A0972D390>
sector = 'transportation', acceptable_pct_difference = 0.05

    @pytest.mark.parametrize('sector', ['transportation']) # 'residential', 'commercial', 'industrial', 'electricity',
    def test_calc_asi(self, sector, acceptable_pct_difference=0.05):
        """Write test_calc_ASI to test LMDI class.
    
        - Test both additive and multiplicative forms
        - Test all sectors
        """
    
        eii = self.eii_output_factory(sector)
    
        pnnl_data = self.get_pnnl_input(sector, 'intermediate')
    
        pnnl_output = self.get_pnnl_data(sector)
        pnnl_output = pnnl_output['results']
    
        model = 'multiplicative'
    
        bools_list = []
    
        for e_type in pnnl_data['Energy Type'].unique():
    
            for level_ in pnnl_data['Nest level'].unique():
    
    
                if 'Weather' in pnnl_data['Energy Type']:
                    weather_data = pnnl_data[pnnl_data['Energy Type'] == 'Weather']
                else:
                    weather_data = None
    
                log_mean_divisia_weights_normalized = pnnl_data[pnnl_data['Data Type'] == 'Log Mean Divisia Weights (normalized)'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                log_ratio_activity = pnnl_data[pnnl_data['Data Type'] == 'Log Changes Activity'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                log_ratio_structure = pnnl_data[pnnl_data['Data Type'] == 'Log Changes Lower-level Structure'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
                log_ratio_intensity = pnnl_data[pnnl_data['Data Type'] == 'Log Changes Intensity'][['Year', 'Category', 'Value']].pivot(index='Year', columns='Category', values='Value').dropna(axis=1, how='all')
    
                log_ratios = {'activity': log_ratio_activity,
                              'structure': log_ratio_structure,
                              'intensity': log_ratio_intensity}
                print('log ratios:\n', log_ratios)
                print('log ratios type:\n', type(log_ratios['activity']))
    
                print("log_mean_divisia_weights_normalized: \n", log_mean_divisia_weights_normalized)
    
                print("log_mean_divisia_weights_normalized type: \n", type(log_mean_divisia_weights_normalized))
    
                eii_output = eii.calc_ASI(model, weather_data, log_mean_divisia_weights_normalized,
>                                         log_ratios)

tests\lmdi_test.py:634: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
EnergyIntensityIndicators\LMDI.py:58: in calc_ASI
    activity = self.calc_component(log_ratios['activity'], log_mean_divisia_weights_normalized)
EnergyIntensityIndicators\LMDI.py:51: in calc_component
    component = (weights.multiply(log_ratio_component.values, axis='columns')).sum(axis=1)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:2023: in f
    return self._combine_frame(other, pass_op, fill_value, level)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\frame.py:5090: in _combine_frame
    result = _arith_op(this.values, other.values)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\frame.py:5084: in _arith_op
    return func(left, right)
..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:2003: in na_op
    result = masked_arith_op(x, y, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

x = array([[nan, nan, '0.608850775', '0.391149225', 0.999999999, 5.91895e-10,
        nan, nan, nan],
       ['0.545642404...35094',
        0.999999999, 7.249839999999999e-10, '0.095266378', '0.060561691',
        '0.01305154']], dtype=object)
y = array([['0.145576231', '-0.238653861', '0.096806155', '0.161959122',
        5.08293e-09, -0.003109421, '-0.046181859'...  -2.3540400000000003e-08, 0.014872063999999999, '-0.055502716',
        '0.020518952', '-0.017878895']], dtype=object)
op = <built-in function mul>

    def masked_arith_op(x, y, op):
        """
        If the given arithmetic operation fails, attempt it again on
        only the non-null elements of the input array(s).
    
        Parameters
        ----------
        x : np.ndarray
        y : np.ndarray, Series, Index
        op : binary operator
        """
        # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes
        # the logic valid for both Series and DataFrame ops.
        xrav = x.ravel()
        assert isinstance(x, (np.ndarray, ABCSeries)), type(x)
        if isinstance(y, (np.ndarray, ABCSeries, ABCIndexClass)):
            dtype = find_common_type([x.dtype, y.dtype])
            result = np.empty(x.size, dtype=dtype)
    
            # PeriodIndex.ravel() returns int64 dtype, so we have
            # to work around that case.  See GH#19956
            yrav = y if is_period_dtype(y) else y.ravel()
            mask = notna(xrav) & notna(yrav)
    
            if yrav.shape != mask.shape:
                # FIXME: GH#5284, GH#5035, GH#19448
                # Without specifically raising here we get mismatched
                # errors in Py3 (TypeError) vs Py2 (ValueError)
                # Note: Only = an issue in DataFrame case
                raise ValueError('Cannot broadcast operands together.')
    
            if mask.any():
                with np.errstate(all='ignore'):
                    result[mask] = op(xrav[mask],
>                                     com.values_from_object(yrav[mask]))
E                   TypeError: can't multiply sequence by non-int of type 'str'

..\..\..\Anaconda3\envs\EIIEnvironment\lib\site-packages\pandas\core\ops.py:1009: TypeError
---------------------------- Captured stdout call -----------------------------
log ratios:
 {'activity': Category       Highway           Air  ...          Rail    Waterborne
Year                                  ...                            
1970       0.145576231  -0.238653861  ...  -0.100762706   0.022968648
1971        0.06272963   0.180348498  ...  -0.045832939  -0.017607786
1972       0.020239366   0.075839687  ...   0.009220022   -0.02224451
1973       0.027038338  -0.030385649  ...   0.048015364  -0.075965606
1974      -0.008215796    0.02220567  ...   0.008059381   0.011879845
1975       0.016722765   0.040684118  ...  -0.043306638   0.041990566
1976        0.04025835    0.19215769  ...  -0.010176006  -0.016914338
1977       0.042562355   0.026031759  ...  -0.000794044  -0.028581949
1978      -0.046064371  -0.065163596  ...  -0.086022995   0.199060077
1979      -0.017807042  -0.001294318  ...   0.036811105  -0.024123772
1980      -0.093085612   0.029463262  ...  -0.004004508   0.096660558
1981       -0.02801398   0.018116982  ...   0.004207853   0.022004494
1982       0.060314821   0.050585622  ...  -0.067273916   0.017242016
1983       0.043437524   0.039883455  ...  -0.007207225  -0.008090336
1984       0.008816731   0.051636876  ...   0.065070006   -0.07687813
1985       0.023051762  -0.017519515  ...  -0.036628902   0.018827312
1986        0.03358586   0.199172658  ...  -0.005682626  -0.017223464
1987      -0.004245092    0.12588243  ...    0.03119799  -0.027895675
1988       0.013926232   0.072830443  ...   0.019100886  -0.041005448
1989       0.028608955   0.115560505  ...    0.02230155  -0.082660608
1990       0.005106473  -0.016351936  ...   -0.00012704   0.002037894
1991       0.006316446  -0.031557027  ...  -0.011229204   0.001701988
1992       0.001466484   0.047175924  ...    0.00449617  -0.012292357
1993        0.03436288   0.086559297  ...   0.027945128  -0.092616477
1994       0.005976841   0.072674647  ...   0.019968541  -0.027710559
1995      -0.004270857   0.026260261  ...    0.03910071  -0.053587812
1996        0.01323742   0.049937223  ...   0.024815418  -0.067734281
1997       0.043498391   0.103429331  ...  -0.005398531  -0.078042173
1998       0.018153498   0.008281432  ...   0.014175055  -0.056448792
1999       0.009314296  -0.130623487  ...   0.017675343  -0.048144523
2000      -0.002724811   0.169178781  ...   0.007823783  -0.030055599
2001       0.014780565  -0.085141539  ...   0.015354383  -0.042630807
2002       0.014227713   0.074788565  ...  -0.007499938  -0.030756796
2003      -0.001113284   0.049657921  ...   0.017090941  -0.021706828
2004      -0.023531936   0.119192354  ...   0.031488434  -0.013226847
2005       0.005800713   0.031062164  ...    0.01666317  -0.052798679
2006      -0.012911513   0.004027449  ...   0.035865548  -0.059105196
2007       0.007661293   -0.00563138  ...  -0.008605862  -0.023053016
2008       0.013121708  -0.112216937  ...   0.006127371  -0.058447277
2009       0.024040716  -0.053345314  ...  -0.043050261   0.018238203
2010      -0.041188031    0.09179167  ...   0.040807237  -0.006550284
2011      -0.053577479   0.030055645  ...   0.038211431   0.010924238
2012       0.009032126  -0.015702358  ...  -0.003431873    -0.0450328
2013       0.010354252  -0.055213446  ...   0.001254763    -0.0356038
2014      -0.030787421  -0.015372998  ...    0.01944317   0.039196151
2015       0.029554916   0.042596967  ...  -0.035898838  -5.87585E-05
2016       0.058760994    0.05754364  ...  -0.066451552   0.005078299
2017      -0.004871673   0.063624019  ...   0.020518952  -0.017878895

[48 rows x 9 columns], 'structure': Category       Highway  Air   All Freight  ... Pipeline Rail Waterborne
Year                                       ...                         
1970               NaN  NaN           NaN  ...      NaN  NaN        NaN
1971      -0.002304614    0   0.037469362  ...        0    0          0
1972       0.006819129    0   0.012897149  ...        0    0          0
1973      -0.000737207    0   0.007623402  ...        0    0          0
1974       0.003557018    0  -0.005374615  ...        0    0          0
1975       0.030698837    0    0.02627478  ...        0    0          0
1976      -0.016617088    0   0.014454445  ...        0    0          0
1977      -0.001694642    0     0.0177932  ...        0    0          0
1978       0.001710137    0  -0.047097439  ...        0    0          0
1979      -0.007969291    0  -0.013132632  ...        0    0          0
1980       0.008891888    0  -0.051588389  ...        0    0          0
1981       0.010085636    0  -0.010720001  ...        0    0          0
1982       0.008376456    0   0.040146463  ...        0    0          0
1983      -0.011416599    0   0.010901578  ...        0    0          0
1984      -0.002025882    0   0.010566036  ...        0    0          0
1985       0.003555148    0   0.013925259  ...        0    0          0
1986      -0.006883647    0   0.019937607  ...        0    0          0
1987       0.000663552    0   0.003985571  ...        0    0          0
1988      -0.005521746    0    0.01077928  ...        0    0          0
1989       0.001314612    0   0.033807234  ...        0    0          0
1990      -0.001352167    0  -0.001508237  ...        0    0          0
1991      -0.000904837    0   0.003298914  ...        0    0          0
1992      -0.001385929    0   0.003747888  ...        0    0          0
1993       0.001818349    0   0.031420366  ...        0    0          0
1994        0.00298434    0   0.007104106  ...        0    0          0
1995      -0.004562383    0  -0.004092493  ...        0    0          0
1996      -0.001202379    0   0.011937279  ...        0    0          0
1997      -0.000155119    0   0.036064285  ...        0    0          0
1998      -0.001932956    0   0.009676687  ...        0    0          0
1999       0.000229465    0  -0.001502865  ...        0    0          0
2000      -0.001786863    0   0.008706753  ...        0    0          0
2001        0.00154518    0   0.002712335  ...        0    0          0
2002       0.003330855    0   0.018443159  ...        0    0          0
2003       0.002427218    0   0.000875099  ...        0    0          0
2004      -0.000814178    0  -0.011755564  ...        0    0          0
2005      -0.001349653    0   0.003809132  ...        0    0          0
2006       0.004703729    0  -0.006486742  ...        0    0          0
2007                 0    0   0.008920244  ...        0    0          0
2008       0.007560641    0   0.009910363  ...        0    0          0
2009       0.004751224    0   0.024969595  ...        0    0          0
2010      -0.016382593    0  -0.038435288  ...        0    0          0
2011       0.000745766    0  -0.033613607  ...        0    0          0
2012        0.00227528    0   0.011738708  ...        0    0          0
2013      -0.002547666    0    0.00311203  ...        0    0          0
2014        0.00217595    0  -0.022845608  ...        0    0          0
2015       3.20957E-05    0   0.027468237  ...        0    0          0
2016       0.001072386    0   0.049156787  ...        0    0          0
2017      -0.001868225    0  -0.006357992  ...        0    0          0

[48 rows x 7 columns], 'intensity': Category       Highway           Air  ...          Rail    Waterborne
Year                                  ...                            
1970                 0           NaN  ...  -0.026153392           NaN
1971      -0.027315866  -0.043414311  ...   0.037318814  -0.010050336
1972       0.033524789  -0.100436079  ...  -0.004281371  -0.010050336
1973       0.027220935   0.037976741  ...  -0.052098712  -0.010050336
1974       0.013973867  -0.024276712  ...   0.004509659  -0.010050336
1975       0.049583354   0.007935245  ...   0.009580657  -0.010050336
1976      -0.031656923   -0.12337575  ...  -0.009743476  -0.010050336
1977       0.020219843  -0.119184685  ...  -0.017068652  -0.010050336
1978       0.025701377   -0.10080867  ...  -0.042068921  -0.010050336
1979       0.032503217  -0.067322489  ...  -0.036825644  -0.010050336
1980       0.073661323  -0.039262249  ...  -0.034719857  -0.010050336
1981       0.048134197   0.055492756  ...  -0.037423507  -0.010050336
1982      -0.005091674  -0.056565752  ...  -0.040086455  -0.010050336
1983      -0.057770049  -0.054941355  ...  -0.050466283  -0.010050336
1984      -0.015753652   0.028985215  ...  -0.029773255  -0.010050336
1985      -0.011385527  -0.022834224  ...  -0.025174927  -0.010050336
1986      -0.004072945  -0.008345356  ...  -0.023387725  -0.010050336
1987      -0.021012137  -0.051665871  ...  -0.063417713  -0.010050336
1988      -0.023859702  -0.007686935  ...  -0.028598255  -0.010050336
1989      -0.001498578  -0.017014096  ...  -0.014888861  -0.010050336
1990       0.021944023   0.012183149  ...  -0.037624933  -0.010050336
1991      -0.007009967  -0.080483948  ...  -0.073407443  -0.010050336
1992      -0.004548475   0.003081471  ...   0.005775255  -0.010050336
1993      -0.017063622  -0.023993036  ...  -0.009744854  -0.010050336
1994      -0.012444069  -0.028611451  ...  -0.003684072  -0.010050336
1995       0.007347284  -0.012794469  ...  -0.040954596  -0.010050336
1996      -0.003447574  -0.034769271  ...  -0.010198807  -0.010050336
1997       -0.03237695  -0.007893573  ...    0.00576728  -0.010050336
1998       0.039699464   0.000368932  ...  -0.016023785  -0.038318864
1999       0.013859137    0.00656559  ...  -0.005036988   0.038318864
2000       0.026399695  -0.046065417  ...  -0.030157106    0.01492565
2001      -0.020635167   0.013248368  ...  -0.017273874   -0.06503247
2002        0.01514564  -0.080707883  ...  -0.001965473   2.22045E-16
2003      -0.055368769  -0.037044813  ...  -0.003317793   -0.00793655
2004       0.001291745  -0.077452558  ...  -0.010428472  -0.040656006
2005       0.018865037  -0.011846204  ...  -0.010948824   2.22045E-16
2006       0.022834996   0.003857087  ...  -0.020849287  -0.025211419
2007      -0.000244494  -0.022774139  ...  -0.029834846  -0.043485112
2008      -0.008065879  -0.014359041  ...  -0.047836778   0.113328685
2009        0.00251958  -0.027639895  ...   -0.04609895  -0.113328685
2010        0.01591246  -0.042007268  ...  -0.009825544  -0.036203049
2011       0.008542093  -0.004591133  ...   0.030610947   -0.02803922
2012      -0.006093965    -0.0383975  ...  -0.011123903  -1.11022E-16
2013      -0.000768156  -0.015498328  ...   0.005100294    0.09918032
2014       0.002856957  -0.028138377  ...  -0.013061449  -0.085062439
2015      -0.008797334  -0.005977613  ...   0.017245671   0.004662013
2016      -0.001827431   -0.01354158  ...   0.013181562             0
2017      -0.010327258  -0.023862383  ...  -0.027218804             0

[48 rows x 9 columns]}
log ratios type:
 <class 'pandas.core.frame.DataFrame'>
log_mean_divisia_weights_normalized: 
 Category      Highway          Air  ...         Rail   Waterborne
Year                                ...                          
1970              NaN          NaN  ...          NaN          NaN
1971      0.545642404   0.04360446  ...  0.142537983  0.055614512
1972      0.556498501  0.044868856  ...  0.138465233  0.052527312
1973      0.578226793  0.043655105  ...  0.135942197   0.04859831
1974      0.595936315  0.043724376  ...   0.13636102   0.04652332
1975      0.615361582  0.043816474  ...  0.132135675  0.046324862
1976      0.635056143  0.045886032  ...  0.126952802  0.045844209
1977      0.652623253  0.045371068  ...  0.124672476   0.04440287
1978      0.672798589  0.040232721  ...  0.117007098  0.048414733
1979      0.678104704  0.036264581  ...  0.111241818  0.052929101
1980      0.673040821  0.034666327  ...  0.108504768  0.054044457
1981      0.672087357   0.03539331  ...  0.103507816  0.056121635
1982      0.685074077  0.035605211  ...  0.093900521  0.055108967
1983      0.705417634  0.035599041  ...  0.087291566  0.055379489
1984       0.71200366  0.037788218  ...  0.088658945  0.053979691
1985      0.714456816  0.038560409  ...  0.087527554  0.051911092
1986      0.721802039   0.04126284  ...  0.082909839   0.05099225
1987      0.721070479  0.047065524  ...  0.080398608  0.049351454
1988      0.711620192  0.050797562  ...  0.079277548  0.047531494
1989       0.70574592  0.054325869  ...  0.078035196  0.043606509
1990      0.709451212  0.055710025  ...  0.075209653  0.040547104
1991      0.720963792   0.05279247  ...   0.07103153  0.040378334
1992      0.730116715  0.051985836  ...  0.069510747  0.040391515
1993       0.73023592  0.054607236  ...  0.070003497  0.037696585
1994      0.727285274  0.056917674  ...  0.070381179  0.034706638
1995      0.726020273  0.058619159  ...  0.070943231  0.033017843
1996      0.728236415  0.059433905  ...  0.071361697  0.030752907
1997      0.726773517  0.062095728  ...  0.071056403  0.027978283
1998      0.737347846  0.064166229  ...  0.069664944  0.025054347
1999      0.754921536  0.059647573  ...  0.068924078  0.023386111
2000      0.760501982  0.058697504  ...  0.067556211  0.022746846
2001       0.76434295  0.059976787  ...  0.066487145  0.021318987
2002      0.769404771  0.057246079  ...  0.065613071  0.019738328
2003      0.770428384  0.058139011  ...  0.066556778  0.019380059
2004      0.768837061  0.061960197  ...    0.0702355  0.019278539
2005      0.769075179  0.063878564  ...   0.07119017  0.018283723
2006      0.771520965  0.063735233  ...   0.07080393  0.016807225
2007       0.77412631  0.062606628  ...  0.069451437  0.015464755
2008      0.778587926  0.057729922  ...   0.06643948  0.015307758
2009       0.78410402  0.051257154  ...  0.061339409  0.014788574
2010       0.78298012  0.050643304  ...  0.059781698  0.013846946
2011       0.77250164  0.054148846  ...  0.064733847  0.013840763
2012      0.764724843  0.053887512  ...  0.067121354  0.013545929
2013      0.761075501  0.050085937  ...  0.066120245  0.013523531
2014      0.765142304  0.047989999  ...  0.067533525  0.013844201
2015        0.7740006  0.048500367  ...  0.068063249  0.013752876
2016      0.779612311  0.048895661  ...  0.063604094  0.013382983
2017      0.781067717  0.050052674  ...  0.060561691   0.01305154

[48 rows x 9 columns]
log_mean_divisia_weights_normalized type: 
 <class 'pandas.core.frame.DataFrame'>
WEIGHTS: Category      Highway          Air  ...         Rail   Waterborne
Year                                ...                          
1970              NaN          NaN  ...          NaN          NaN
1971      0.545642404   0.04360446  ...  0.142537983  0.055614512
1972      0.556498501  0.044868856  ...  0.138465233  0.052527312
1973      0.578226793  0.043655105  ...  0.135942197   0.04859831
1974      0.595936315  0.043724376  ...   0.13636102   0.04652332
1975      0.615361582  0.043816474  ...  0.132135675  0.046324862
1976      0.635056143  0.045886032  ...  0.126952802  0.045844209
1977      0.652623253  0.045371068  ...  0.124672476   0.04440287
1978      0.672798589  0.040232721  ...  0.117007098  0.048414733
1979      0.678104704  0.036264581  ...  0.111241818  0.052929101
1980      0.673040821  0.034666327  ...  0.108504768  0.054044457
1981      0.672087357   0.03539331  ...  0.103507816  0.056121635
1982      0.685074077  0.035605211  ...  0.093900521  0.055108967
1983      0.705417634  0.035599041  ...  0.087291566  0.055379489
1984       0.71200366  0.037788218  ...  0.088658945  0.053979691
1985      0.714456816  0.038560409  ...  0.087527554  0.051911092
1986      0.721802039   0.04126284  ...  0.082909839   0.05099225
1987      0.721070479  0.047065524  ...  0.080398608  0.049351454
1988      0.711620192  0.050797562  ...  0.079277548  0.047531494
1989       0.70574592  0.054325869  ...  0.078035196  0.043606509
1990      0.709451212  0.055710025  ...  0.075209653  0.040547104
1991      0.720963792   0.05279247  ...   0.07103153  0.040378334
1992      0.730116715  0.051985836  ...  0.069510747  0.040391515
1993       0.73023592  0.054607236  ...  0.070003497  0.037696585
1994      0.727285274  0.056917674  ...  0.070381179  0.034706638
1995      0.726020273  0.058619159  ...  0.070943231  0.033017843
1996      0.728236415  0.059433905  ...  0.071361697  0.030752907
1997      0.726773517  0.062095728  ...  0.071056403  0.027978283
1998      0.737347846  0.064166229  ...  0.069664944  0.025054347
1999      0.754921536  0.059647573  ...  0.068924078  0.023386111
2000      0.760501982  0.058697504  ...  0.067556211  0.022746846
2001       0.76434295  0.059976787  ...  0.066487145  0.021318987
2002      0.769404771  0.057246079  ...  0.065613071  0.019738328
2003      0.770428384  0.058139011  ...  0.066556778  0.019380059
2004      0.768837061  0.061960197  ...    0.0702355  0.019278539
2005      0.769075179  0.063878564  ...   0.07119017  0.018283723
2006      0.771520965  0.063735233  ...   0.07080393  0.016807225
2007       0.77412631  0.062606628  ...  0.069451437  0.015464755
2008      0.778587926  0.057729922  ...   0.06643948  0.015307758
2009       0.78410402  0.051257154  ...  0.061339409  0.014788574
2010       0.78298012  0.050643304  ...  0.059781698  0.013846946
2011       0.77250164  0.054148846  ...  0.064733847  0.013840763
2012      0.764724843  0.053887512  ...  0.067121354  0.013545929
2013      0.761075501  0.050085937  ...  0.066120245  0.013523531
2014      0.765142304  0.047989999  ...  0.067533525  0.013844201
2015        0.7740006  0.048500367  ...  0.068063249  0.013752876
2016      0.779612311  0.048895661  ...  0.063604094  0.013382983
2017      0.781067717  0.050052674  ...  0.060561691   0.01305154

[48 rows x 9 columns]
log ratio component:
 Category       Highway           Air  ...          Rail    Waterborne
Year                                  ...                            
1970       0.145576231  -0.238653861  ...  -0.100762706   0.022968648
1971        0.06272963   0.180348498  ...  -0.045832939  -0.017607786
1972       0.020239366   0.075839687  ...   0.009220022   -0.02224451
1973       0.027038338  -0.030385649  ...   0.048015364  -0.075965606
1974      -0.008215796    0.02220567  ...   0.008059381   0.011879845
1975       0.016722765   0.040684118  ...  -0.043306638   0.041990566
1976        0.04025835    0.19215769  ...  -0.010176006  -0.016914338
1977       0.042562355   0.026031759  ...  -0.000794044  -0.028581949
1978      -0.046064371  -0.065163596  ...  -0.086022995   0.199060077
1979      -0.017807042  -0.001294318  ...   0.036811105  -0.024123772
1980      -0.093085612   0.029463262  ...  -0.004004508   0.096660558
1981       -0.02801398   0.018116982  ...   0.004207853   0.022004494
1982       0.060314821   0.050585622  ...  -0.067273916   0.017242016
1983       0.043437524   0.039883455  ...  -0.007207225  -0.008090336
1984       0.008816731   0.051636876  ...   0.065070006   -0.07687813
1985       0.023051762  -0.017519515  ...  -0.036628902   0.018827312
1986        0.03358586   0.199172658  ...  -0.005682626  -0.017223464
1987      -0.004245092    0.12588243  ...    0.03119799  -0.027895675
1988       0.013926232   0.072830443  ...   0.019100886  -0.041005448
1989       0.028608955   0.115560505  ...    0.02230155  -0.082660608
1990       0.005106473  -0.016351936  ...   -0.00012704   0.002037894
1991       0.006316446  -0.031557027  ...  -0.011229204   0.001701988
1992       0.001466484   0.047175924  ...    0.00449617  -0.012292357
1993        0.03436288   0.086559297  ...   0.027945128  -0.092616477
1994       0.005976841   0.072674647  ...   0.019968541  -0.027710559
1995      -0.004270857   0.026260261  ...    0.03910071  -0.053587812
1996        0.01323742   0.049937223  ...   0.024815418  -0.067734281
1997       0.043498391   0.103429331  ...  -0.005398531  -0.078042173
1998       0.018153498   0.008281432  ...   0.014175055  -0.056448792
1999       0.009314296  -0.130623487  ...   0.017675343  -0.048144523
2000      -0.002724811   0.169178781  ...   0.007823783  -0.030055599
2001       0.014780565  -0.085141539  ...   0.015354383  -0.042630807
2002       0.014227713   0.074788565  ...  -0.007499938  -0.030756796
2003      -0.001113284   0.049657921  ...   0.017090941  -0.021706828
2004      -0.023531936   0.119192354  ...   0.031488434  -0.013226847
2005       0.005800713   0.031062164  ...    0.01666317  -0.052798679
2006      -0.012911513   0.004027449  ...   0.035865548  -0.059105196
2007       0.007661293   -0.00563138  ...  -0.008605862  -0.023053016
2008       0.013121708  -0.112216937  ...   0.006127371  -0.058447277
2009       0.024040716  -0.053345314  ...  -0.043050261   0.018238203
2010      -0.041188031    0.09179167  ...   0.040807237  -0.006550284
2011      -0.053577479   0.030055645  ...   0.038211431   0.010924238
2012       0.009032126  -0.015702358  ...  -0.003431873    -0.0450328
2013       0.010354252  -0.055213446  ...   0.001254763    -0.0356038
2014      -0.030787421  -0.015372998  ...    0.01944317   0.039196151
2015       0.029554916   0.042596967  ...  -0.035898838  -5.87585E-05
2016       0.058760994    0.05754364  ...  -0.066451552   0.005078299
2017      -0.004871673   0.063624019  ...   0.020518952  -0.017878895

[48 rows x 9 columns]
============================== warnings summary ===============================
tests/lmdi_test.py::TestLMDI::test_multiplicative_lmdi_log_mean_divisia_weights[transportation]
  C:\Users\irabidea\Documents\GitHub\EnergyIntensityIndicators\EnergyIntensityIndicators\LMDI.py:448: SettingWithCopyWarning:
  
  
  A value is trying to be set on a copy of a slice from a DataFrame.
  Try using .loc[row_indexer,col_indexer] = value instead
  
  See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy

tests/lmdi_test.py::TestLMDI::test_multiplicative_lmdi_log_mean_divisia_weights[transportation]
tests/lmdi_test.py::TestLMDI::test_calc_asi[transportation]
  C:\Users\irabidea\Documents\GitHub\EnergyIntensityIndicators\tests\lmdi_test.py:101: SettingWithCopyWarning:
  
  
  A value is trying to be set on a copy of a slice from a DataFrame.
  Try using .loc[row_indexer,col_indexer] = value instead
  
  See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ===========================
FAILED tests/lmdi_test.py::TestLMDI::test_calculate_log_changes - assert False
FAILED tests/lmdi_test.py::TestLMDI::test_compute_index - ValueError: Incompa...
FAILED tests/lmdi_test.py::TestLMDI::test_multiplicative_lmdi_log_mean_divisia_weights[transportation]
FAILED tests/lmdi_test.py::TestLMDI::test_calc_asi[transportation] - TypeErro...
============= 4 failed, 3 passed, 3 warnings in 311.04s (0:05:11) =============
