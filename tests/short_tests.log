============================= test session starts =============================
platform win32 -- Python 3.6.5, pytest-5.4.3, py-1.8.0, pluggy-0.12.0
rootdir: C:\Users\irabidea\Documents\GitHub\EnergyIntensityIndicators
collected 5 items

tests\lmdi_test.py .FFFF                                                 [100%]

================================== FAILURES ===================================
_____________________ TestLMDI.test_calculate_log_changes _____________________

self = <lmdi_test.TestLMDI object at 0x00000252600A26D8>
sector = 'transportation', acceptable_pct_difference = 0.05

    def test_calculate_log_changes(self, sector='transportation', acceptable_pct_difference=0.05):
        eii = self.eii_output_factory(sector)
    
        input_data = [[1.2759, 0.9869],
                      [1.2650, 0.9743],
                      [1.2579, 0.9910],
                      [1.2634, 0.9915],
                      [1.2396, 0.9906]]
    
    
        input_df = pd.DataFrame(input_data,
                                     index=[1970, 1971, 1972, 1973, 1974],
                                     columns=['All_Passenger', 'All_Freight'])
    
        log_ratio_df = eii.calculate_log_changes(input_df)
        log_ratio_df = log_ratio_df.round(4)
        comparison_output = [[np.nan, np.nan],
                             [-0.0086, -0.0129],
                             [-0.0056, 0.0170],
                             [0.0044, 0.0005],
                             [-0.0190, -0.0009]]
    
        comparison_df = pd.DataFrame(comparison_output,
                                     index=[1970, 1971, 1972, 1973, 1974],
                                     columns=['All_Passenger', 'All_Freight'])
        print('comparison_df:\n', comparison_df)
        print('log_ratio_df:\n', log_ratio_df)
        # assert log_ratio_df.equals(comparison_df)
>       assert self.pct_diff(comparison_df, log_ratio_df, acceptable_pct_difference, sector='transportation')

tests\lmdi_test.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <lmdi_test.TestLMDI object at 0x00000252600A26D8>
pnnl_data =       All_Passenger  All_Freight
1970            NaN          NaN
1971        -0.0086      -0.0129
1972        -0.0056       0.0170
1973         0.0044       0.0005
1974        -0.0190      -0.0009
eii_data =       All_Passenger  All_Freight
1970            NaN          NaN
1971        -0.0086      -0.0128
1972        -0.0056       0.0170
1973         0.0044       0.0005
1974        -0.0190      -0.0009
acceptable_pct_difference = 0.05, sector = 'transportation'

    def pct_diff(self, pnnl_data, eii_data, acceptable_pct_difference, sector):
        eii = self.eii_output_factory(sector)
        pnnl_data, eii_data = eii.ensure_same_indices(pnnl_data, eii_data)
        diff_df = pnnl_data.subtract(eii_data)
        diff_df_abs = np.absolute(diff_df)
        pct_diff = np.absolute(diff_df_abs.divide(pnnl_data))
        compare_df = pct_diff.apply(lambda col: col<=acceptable_pct_difference, axis=1)
        print('compare df:\n', compare_df)
        print('diff_df: ', diff_df)
        print('\npct_diff:\n', pct_diff)
        print('(pct_diff <= acceptable_pct_difference).all():', (pct_diff <= acceptable_pct_difference).all().all())
>       return compare_df.all(axis=1).apply()
E       TypeError: apply() missing 1 required positional argument: 'func'

tests\lmdi_test.py:600: TypeError
---------------------------- Captured stdout call -----------------------------
change:
       All_Passenger  All_Freight
1970            NaN          NaN
1971       0.991457     0.987233
1972       0.994387     1.017141
1973       1.004372     1.000505
1974       0.981162     0.999092
All_Passenger    float64
All_Freight      float64
dtype: object
comparison_df:
       All_Passenger  All_Freight
1970            NaN          NaN
1971        -0.0086      -0.0129
1972        -0.0056       0.0170
1973         0.0044       0.0005
1974        -0.0190      -0.0009
log_ratio_df:
       All_Passenger  All_Freight
1970            NaN          NaN
1971        -0.0086      -0.0128
1972        -0.0056       0.0170
1973         0.0044       0.0005
1974        -0.0190      -0.0009
compare df:
       All_Passenger  All_Freight
1970          False        False
1971           True         True
1972           True         True
1973           True         True
1974           True         True
diff_df:        All_Passenger  All_Freight
1970            NaN          NaN
1971            0.0      -0.0001
1972            0.0       0.0000
1973            0.0       0.0000
1974            0.0       0.0000

pct_diff:
       All_Passenger  All_Freight
1970            NaN          NaN
1971            0.0     0.007752
1972            0.0     0.000000
1973            0.0     0.000000
1974            0.0     0.000000
(pct_diff <= acceptable_pct_difference).all(): False
_________________________ TestLMDI.test_compute_index _________________________

self = <lmdi_test.TestLMDI object at 0x0000025265E1EF60>

    def test_compute_index(self):
        eii = MultiplicativeLMDI()
    
        results = [[0.9705, 1.0386, 1.0037],
                   [0.9957, 1.0329, 1.0054],
                   [0.9982, 1.0145, 1.0052],
                   [1.0076, 1.0165, 1.0066],
                   [0.9814, 1.0412, 1.0016]]
    
        results = pd.DataFrame(results,
                               index=[1983, 1984, 1985, 1986, 1987],
                               columns=['Intensity Index', 'Activity Index', 'Structure Index'])
    
        for col in results.columns:
            results[col] = eii.compute_index(results[col], 1985)
            results[col] = results[col].astype(float).round(4)
    
        comparison_output = [[1.0062, 0.9543, 0.9895],
                             [1.0018, 0.9857, 0.9948],
                             [1.0000, 1.0000, 1.0000],
                             [1.0076, 1.0165, 1.0066],
                             [0.9889, 1.0584, 1.0082]]
    
        comparison_output = pd.DataFrame(comparison_output,
                                         index=[1983, 1984, 1985, 1986, 1987],
                                         columns=['Intensity Index', 'Activity Index', 'Structure Index'])
        print('results_:\n', results)
        print('comparison_output:\n', comparison_output)
        # assert results.equals(comparison_output)
>       assert self.pct_diff(comparison_output, results, acceptable_pct_difference=0.05, sector='transportation')

tests\lmdi_test.py:385: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <lmdi_test.TestLMDI object at 0x0000025265E1EF60>
pnnl_data =       Intensity Index  Activity Index  Structure Index
1983           1.0062          0.9543           0.9895
1984    ...   1.0000
1986           1.0076          1.0165           1.0066
1987           0.9889          1.0584           1.0082
eii_data =       Intensity Index  Activity Index  Structure Index
1983           1.0061          0.9543           0.9895
1984    ...   1.0000
1986           1.0076          1.0165           1.0066
1987           0.9889          1.0584           1.0082
acceptable_pct_difference = 0.05, sector = 'transportation'

    def pct_diff(self, pnnl_data, eii_data, acceptable_pct_difference, sector):
        eii = self.eii_output_factory(sector)
        pnnl_data, eii_data = eii.ensure_same_indices(pnnl_data, eii_data)
        diff_df = pnnl_data.subtract(eii_data)
        diff_df_abs = np.absolute(diff_df)
        pct_diff = np.absolute(diff_df_abs.divide(pnnl_data))
        compare_df = pct_diff.apply(lambda col: col<=acceptable_pct_difference, axis=1)
        print('compare df:\n', compare_df)
        print('diff_df: ', diff_df)
        print('\npct_diff:\n', pct_diff)
        print('(pct_diff <= acceptable_pct_difference).all():', (pct_diff <= acceptable_pct_difference).all().all())
>       return compare_df.all(axis=1).apply()
E       TypeError: apply() missing 1 required positional argument: 'func'

tests\lmdi_test.py:600: TypeError
---------------------------- Captured stdout call -----------------------------
results_:
       Intensity Index  Activity Index  Structure Index
1983           1.0061          0.9543           0.9895
1984           1.0018          0.9857           0.9948
1985           1.0000          1.0000           1.0000
1986           1.0076          1.0165           1.0066
1987           0.9889          1.0584           1.0082
comparison_output:
       Intensity Index  Activity Index  Structure Index
1983           1.0062          0.9543           0.9895
1984           1.0018          0.9857           0.9948
1985           1.0000          1.0000           1.0000
1986           1.0076          1.0165           1.0066
1987           0.9889          1.0584           1.0082
compare df:
       Intensity Index  Activity Index  Structure Index
1983             True            True             True
1984             True            True             True
1985             True            True             True
1986             True            True             True
1987             True            True             True
diff_df:        Intensity Index  Activity Index  Structure Index
1983           0.0001             0.0              0.0
1984           0.0000             0.0              0.0
1985           0.0000             0.0              0.0
1986           0.0000             0.0              0.0
1987           0.0000             0.0              0.0

pct_diff:
       Intensity Index  Activity Index  Structure Index
1983         0.000099             0.0              0.0
1984         0.000000             0.0              0.0
1985         0.000000             0.0              0.0
1986         0.000000             0.0              0.0
1987         0.000000             0.0              0.0
(pct_diff <= acceptable_pct_difference).all(): True
_____________________________ TestLMDI.test_shift _____________________________

self = <lmdi_test.TestLMDI object at 0x0000025265E212E8>
sector = 'transportation', acceptable_pct_difference = 0.05

    def test_shift(self, sector='transportation', acceptable_pct_difference=0.05):
        eii = self.eii_output_factory(sector)
        pnnl_data = [[0.5433, 0.1449], [0.5479, 0.1402], [0.5650, 0.1367]]
        energy_shares = pd.DataFrame(pnnl_data, index=[1970, 1971, 1972], columns=['Highway', 'Rail'])
    
        log_mean_weights = pd.DataFrame(index=energy_shares.index)
        print("log_mean_divisia_weights energy shares:", energy_shares)
        for col in energy_shares.columns:
            print(f'log_mean_divisia_weights col: {col}')
            energy_shares[f"{col}_shift"] = energy_shares[col].shift(periods=1, axis='index', fill_value=0)
            print('energy shares with shift:\n', energy_shares)
            # apply generally not preferred for row-wise operations but?
            log_mean_weights[f'log_mean_weights_{col}'] = energy_shares.apply(lambda row: \
                                                          eii.logarithmic_average(row[col], row[f"{col}_shift"]), axis=1)
        print('log_mean_weights:\n', log_mean_weights)
        log_mean_weights = log_mean_weights.loc[1971:, :]
        print('log_mean_weights:\n', log_mean_weights)
        log_mean_weights = log_mean_weights.round(4)
        print('log_mean_weights:\n', log_mean_weights)
    
        pnnl_results = [[0.5456, 0.1425], [0.5564, 0.1385]]
        pnnl_df = pd.DataFrame(pnnl_results, index=[1971, 1972], columns=['log_mean_weights_Highway', 'log_mean_weights_Rail'])
        print('pnnl_df:\n', pnnl_df)
>       acceptable_bool = self.pct_diff(pnnl_df, log_mean_weights, acceptable_pct_difference, sector)

tests\lmdi_test.py:450: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <lmdi_test.TestLMDI object at 0x0000025265E212E8>
pnnl_data =       log_mean_weights_Highway  log_mean_weights_Rail
1971                    0.5456                 0.1425
1972                    0.5564                 0.1385
eii_data =       log_mean_weights_Highway  log_mean_weights_Rail
1971                    0.5456                 0.1425
1972                    0.5564                 0.1384
acceptable_pct_difference = 0.05, sector = 'transportation'

    def pct_diff(self, pnnl_data, eii_data, acceptable_pct_difference, sector):
        eii = self.eii_output_factory(sector)
        pnnl_data, eii_data = eii.ensure_same_indices(pnnl_data, eii_data)
        diff_df = pnnl_data.subtract(eii_data)
        diff_df_abs = np.absolute(diff_df)
        pct_diff = np.absolute(diff_df_abs.divide(pnnl_data))
        compare_df = pct_diff.apply(lambda col: col<=acceptable_pct_difference, axis=1)
        print('compare df:\n', compare_df)
        print('diff_df: ', diff_df)
        print('\npct_diff:\n', pct_diff)
        print('(pct_diff <= acceptable_pct_difference).all():', (pct_diff <= acceptable_pct_difference).all().all())
>       return compare_df.all(axis=1).apply()
E       TypeError: apply() missing 1 required positional argument: 'func'

tests\lmdi_test.py:600: TypeError
---------------------------- Captured stdout call -----------------------------
log_mean_divisia_weights energy shares:       Highway    Rail
1970   0.5433  0.1449
1971   0.5479  0.1402
1972   0.5650  0.1367
log_mean_divisia_weights col: Highway
energy shares with shift:
       Highway    Rail  Highway_shift
1970   0.5433  0.1449         0.0000
1971   0.5479  0.1402         0.5433
1972   0.5650  0.1367         0.5479
log_mean_divisia_weights col: Rail
energy shares with shift:
       Highway    Rail  Highway_shift  Rail_shift
1970   0.5433  0.1449         0.0000      0.0000
1971   0.5479  0.1402         0.5433      0.1449
1972   0.5650  0.1367         0.5479      0.1402
log_mean_weights:
       log_mean_weights_Highway  log_mean_weights_Rail
1970                       NaN                    NaN
1971                  0.545597               0.142537
1972                  0.556406               0.138443
log_mean_weights:
       log_mean_weights_Highway  log_mean_weights_Rail
1971                  0.545597               0.142537
1972                  0.556406               0.138443
log_mean_weights:
       log_mean_weights_Highway  log_mean_weights_Rail
1971                    0.5456                 0.1425
1972                    0.5564                 0.1384
pnnl_df:
       log_mean_weights_Highway  log_mean_weights_Rail
1971                    0.5456                 0.1425
1972                    0.5564                 0.1385
compare df:
       log_mean_weights_Highway  log_mean_weights_Rail
1971                      True                   True
1972                      True                   True
diff_df:        log_mean_weights_Highway  log_mean_weights_Rail
1971                       0.0                 0.0000
1972                       0.0                 0.0001

pct_diff:
       log_mean_weights_Highway  log_mean_weights_Rail
1971                       0.0               0.000000
1972                       0.0               0.000722
(pct_diff <= acceptable_pct_difference).all(): True
_______________________ TestLMDI.test_normalize_weights _______________________

self = <lmdi_test.TestLMDI object at 0x0000025265DD2EF0>
sector = 'transportation', acceptable_pct_difference = 0.05

    def test_normalize_weights(self, sector='transportation', acceptable_pct_difference=0.05):
        # eii = self.eii_output_factory(sector)
        pnnl_results = [[0.5456, 0.1425, 0.0436, 0.0556, 0.2126],
                        [0.5564, 0.1385, 0.0449, 0.0525, 0.2076]]
        log_mean_weights = pd.DataFrame(pnnl_results, index=[1971, 1972], columns=['log_mean_weights_Highway', 'log_mean_weights_Rail', 'log_mean_weights_Air', 'log_mean_weights_Waterborne', 'log_mean_weights_Pipeline'])
        sum_log_mean_shares = log_mean_weights.sum(axis=1)
        test_total = pd.Series([[0.9999], [0.9999]], index=[1971, 1972])
        print('sum_log_mean_shares:\n', sum_log_mean_shares)
        print('sum_log_mean_shares == test_total', sum_log_mean_shares.equals(test_total))
        log_mean_weights_normalized = log_mean_weights.divide(sum_log_mean_shares.values.reshape(len(sum_log_mean_shares), 1))
        log_mean_weights_normalized = log_mean_weights_normalized.round(4)
        print('log_mean_weights_normalized:\n', log_mean_weights_normalized)
    
        pnnl_normalized = [[0.5456, 0.1425, 0.0436, 0.0556, 0.2126],
                           [0.5565, 0.1385, 0.0449, 0.0525, 0.2076]]
        pnnl_normalized_df = pd.DataFrame(pnnl_normalized, index=[1971, 1972], columns=['log_mean_weights_Highway', 'log_mean_weights_Rail', 'log_mean_weights_Air', 'log_mean_weights_Waterborne', 'log_mean_weights_Pipeline'])
        print('pnnl_normalized_df:\n', pnnl_normalized_df)
>       acceptable_bool = self.pct_diff(pnnl_normalized_df, log_mean_weights_normalized, acceptable_pct_difference, sector=sector)

tests\lmdi_test.py:470: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <lmdi_test.TestLMDI object at 0x0000025265DD2EF0>
pnnl_data =       log_mean_weights_Highway  ...  log_mean_weights_Pipeline
1971                    0.5456  ...                     0.2126
1972                    0.5565  ...                     0.2076

[2 rows x 5 columns]
eii_data =       log_mean_weights_Highway  ...  log_mean_weights_Pipeline
1971                    0.5457  ...                     0.2126
1972                    0.5565  ...                     0.2076

[2 rows x 5 columns]
acceptable_pct_difference = 0.05, sector = 'transportation'

    def pct_diff(self, pnnl_data, eii_data, acceptable_pct_difference, sector):
        eii = self.eii_output_factory(sector)
        pnnl_data, eii_data = eii.ensure_same_indices(pnnl_data, eii_data)
        diff_df = pnnl_data.subtract(eii_data)
        diff_df_abs = np.absolute(diff_df)
        pct_diff = np.absolute(diff_df_abs.divide(pnnl_data))
        compare_df = pct_diff.apply(lambda col: col<=acceptable_pct_difference, axis=1)
        print('compare df:\n', compare_df)
        print('diff_df: ', diff_df)
        print('\npct_diff:\n', pct_diff)
        print('(pct_diff <= acceptable_pct_difference).all():', (pct_diff <= acceptable_pct_difference).all().all())
>       return compare_df.all(axis=1).apply()
E       TypeError: apply() missing 1 required positional argument: 'func'

tests\lmdi_test.py:600: TypeError
---------------------------- Captured stdout call -----------------------------
sum_log_mean_shares:
 1971    0.9999
1972    0.9999
dtype: float64
sum_log_mean_shares == test_total False
log_mean_weights_normalized:
       log_mean_weights_Highway  ...  log_mean_weights_Pipeline
1971                    0.5457  ...                     0.2126
1972                    0.5565  ...                     0.2076

[2 rows x 5 columns]
pnnl_normalized_df:
       log_mean_weights_Highway  ...  log_mean_weights_Pipeline
1971                    0.5456  ...                     0.2126
1972                    0.5565  ...                     0.2076

[2 rows x 5 columns]
compare df:
       log_mean_weights_Highway  ...  log_mean_weights_Pipeline
1971                      True  ...                       True
1972                      True  ...                       True

[2 rows x 5 columns]
diff_df:        log_mean_weights_Highway  ...  log_mean_weights_Pipeline
1971                   -0.0001  ...                        0.0
1972                    0.0000  ...                        0.0

[2 rows x 5 columns]

pct_diff:
       log_mean_weights_Highway  ...  log_mean_weights_Pipeline
1971                  0.000183  ...                        0.0
1972                  0.000000  ...                        0.0

[2 rows x 5 columns]
(pct_diff <= acceptable_pct_difference).all(): True
=========================== short test summary info ===========================
FAILED tests/lmdi_test.py::TestLMDI::test_calculate_log_changes - TypeError: ...
FAILED tests/lmdi_test.py::TestLMDI::test_compute_index - TypeError: apply() ...
FAILED tests/lmdi_test.py::TestLMDI::test_shift - TypeError: apply() missing ...
FAILED tests/lmdi_test.py::TestLMDI::test_normalize_weights - TypeError: appl...
=================== 4 failed, 1 passed in 199.31s (0:03:19) ===================
